{
  "address": "0xaca81583840B1bf2dDF6CDe824ada250C1936B4D",
  "abi": [
    {
      "inputs": [],
      "name": "acceptAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rejectAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revertAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bd1a53b941906144a3d23a71e65309e227b3fbe9ceb62f9f4554a1e20f31908",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xaca81583840B1bf2dDF6CDe824ada250C1936B4D",
    "transactionIndex": 0,
    "gasUsed": "383564",
    "logsBloom": "0x
    "blockHash": "0x4febaa08fc90a1c8e05c64b0a7de9593bd4cddd22b8fab1f2678adb89d31b0ea",
    "transactionHash": "0x9bd1a53b941906144a3d23a71e65309e227b3fbe9ceb62f9f4554a1e20f31908",
    "logs": [],
    "blockNumber": 14558194,
    "cumulativeGasUsed": "383564",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "29e6c251a46367ebfca0380b3613092f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"acceptAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revertAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/IERC1155ReceiverMock.sol\":\"IERC1155ReceiverMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/test/IERC1155ReceiverMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n// This is largely replicating OpenZeppelin's ERC1155 - private access to owner\\n// mapping was needed for stashing.\\ncontract IERC1155ReceiverMock is IERC1155Receiver {\\n    bool private _acceptAll = true;\\n    bool private _revertAll = false;\\n\\n    function revertAll() external {\\n        _revertAll = true;\\n    }\\n\\n    function rejectAll() external {\\n        _acceptAll = false;\\n        _revertAll = false;\\n    }\\n\\n    function acceptAll() external {\\n        _acceptAll = true;\\n        _revertAll = false;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        external\\n        pure\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC1155Receiver).interfaceId;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external view override returns (bytes4) {\\n        require(!_revertAll, \\\"Reverting all\\\");\\n        if (_acceptAll) {\\n            return\\n                bytes4(\\n                    keccak256(\\n                        \\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"\\n                    )\\n                );\\n        }\\n        return bytes4(0);\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external view override returns (bytes4) {\\n        require(!_revertAll, \\\"Reverting all\\\");\\n        if (_acceptAll) {\\n            return\\n                bytes4(\\n                    keccak256(\\n                        \\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"\\n                    )\\n                );\\n        }\\n        return bytes4(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5b0f5142a0ed94677e878321db7755ab9db6828596675081785445edd5509d13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805461ffff1916600117905534801561001e57600080fd5b5061059e8061002e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80634e42757f116100505780634e42757f14610144578063bc197c8114610171578063f23a6e61146101b557600080fd5b806301ffc9a7146100775780630ea1cbf6146100e1578063372b041214610113575b600080fd5b6100cc610085366004610335565b7fffffffff00000000000000000000000000000000000000000000000000000000167f4e2312e0000000000000000000000000000000000000000000000000000000001490565b60405190151581526020015b60405180910390f35b610111600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166001179055565b005b610111600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b610111600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169055565b61018461017f366004610435565b6101c8565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100d8565b6101846101c33660046104f0565b610282565b60008054610100900460ff1615610240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f526576657274696e6720616c6c0000000000000000000000000000000000000060448201526064015b60405180910390fd5b60005460ff161561027257507fbc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f6694146621610276565b5060005b98975050505050505050565b60008054610100900460ff16156102f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f526576657274696e6720616c6c000000000000000000000000000000000000006044820152606401610237565b60005460ff161561032757507ff23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf9761032b565b5060005b9695505050505050565b60006020828403121561034757600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461037757600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146103a257600080fd5b919050565b60008083601f8401126103b957600080fd5b50813567ffffffffffffffff8111156103d157600080fd5b6020830191508360208260051b85010111156103ec57600080fd5b9250929050565b60008083601f84011261040557600080fd5b50813567ffffffffffffffff81111561041d57600080fd5b6020830191508360208285010111156103ec57600080fd5b60008060008060008060008060a0898b03121561045157600080fd5b61045a8961037e565b975061046860208a0161037e565b9650604089013567ffffffffffffffff8082111561048557600080fd5b6104918c838d016103a7565b909850965060608b01359150808211156104aa57600080fd5b6104b68c838d016103a7565b909650945060808b01359150808211156104cf57600080fd5b506104dc8b828c016103f3565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561050957600080fd5b6105128761037e565b95506105206020880161037e565b94506040870135935060608701359250608087013567ffffffffffffffff81111561054a57600080fd5b61055689828a016103f3565b979a969950949750929593949250505056fea26469706673582212207d40cfe91aec3e91867fcbea0a75062b75fb355c7bf4efd5ab58d023c562fee964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80634e42757f116100505780634e42757f14610144578063bc197c8114610171578063f23a6e61146101b557600080fd5b806301ffc9a7146100775780630ea1cbf6146100e1578063372b041214610113575b600080fd5b6100cc610085366004610335565b7fffffffff00000000000000000000000000000000000000000000000000000000167f4e2312e0000000000000000000000000000000000000000000000000000000001490565b60405190151581526020015b60405180910390f35b610111600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166001179055565b005b610111600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b610111600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169055565b61018461017f366004610435565b6101c8565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100d8565b6101846101c33660046104f0565b610282565b60008054610100900460ff1615610240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f526576657274696e6720616c6c0000000000000000000000000000000000000060448201526064015b60405180910390fd5b60005460ff161561027257507fbc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f6694146621610276565b5060005b98975050505050505050565b60008054610100900460ff16156102f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f526576657274696e6720616c6c000000000000000000000000000000000000006044820152606401610237565b60005460ff161561032757507ff23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf9761032b565b5060005b9695505050505050565b60006020828403121561034757600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461037757600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146103a257600080fd5b919050565b60008083601f8401126103b957600080fd5b50813567ffffffffffffffff8111156103d157600080fd5b6020830191508360208260051b85010111156103ec57600080fd5b9250929050565b60008083601f84011261040557600080fd5b50813567ffffffffffffffff81111561041d57600080fd5b6020830191508360208285010111156103ec57600080fd5b60008060008060008060008060a0898b03121561045157600080fd5b61045a8961037e565b975061046860208a0161037e565b9650604089013567ffffffffffffffff8082111561048557600080fd5b6104918c838d016103a7565b909850965060608b01359150808211156104aa57600080fd5b6104b68c838d016103a7565b909650945060808b01359150808211156104cf57600080fd5b506104dc8b828c016103f3565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561050957600080fd5b6105128761037e565b95506105206020880161037e565b94506040870135935060608701359250608087013567ffffffffffffffff81111561054a57600080fd5b61055689828a016103f3565b979a969950949750929593949250505056fea26469706673582212207d40cfe91aec3e91867fcbea0a75062b75fb355c7bf4efd5ab58d023c562fee964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3448,
        "contract": "contracts/test/IERC1155ReceiverMock.sol:IERC1155ReceiverMock",
        "label": "_acceptAll",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3451,
        "contract": "contracts/test/IERC1155ReceiverMock.sol:IERC1155ReceiverMock",
        "label": "_revertAll",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}