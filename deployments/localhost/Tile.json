{
  "address": "0x70bDA08DBe07363968e9EE53d899dFE48560605B",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "size",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "batchSize",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "deployerDiscountedTiles",
              "type": "uint256"
            }
          ],
          "internalType": "struct Tile.Limits",
          "name": "initialLimits",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bulkDiscount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintFeeMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct Tile.Fees",
          "name": "initialFees",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "apiUrl",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "proxyRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        }
      ],
      "name": "getMintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getOwningAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "getOwningAddressBatch",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintSize",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTiles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedTiles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseUrl",
          "type": "string"
        }
      ],
      "name": "setBaseUrl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bulkDiscount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintFeeMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct Tile.Fees",
          "name": "newFees",
          "type": "tuple"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "size",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "batchSize",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "deployerDiscountedTiles",
              "type": "uint256"
            }
          ],
          "internalType": "struct Tile.Limits",
          "name": "newLimits",
          "type": "tuple"
        }
      ],
      "name": "setLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "points",
              "type": "uint8"
            }
          ],
          "internalType": "struct ERC1155NFT.RoyaltyConfig",
          "name": "newConfig",
          "type": "tuple"
        }
      ],
      "name": "setRoyaltyConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stasherContract",
          "type": "address"
        }
      ],
      "name": "setStasher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tileIds",
          "type": "uint256[]"
        }
      ],
      "name": "stashBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tileIds",
          "type": "uint256[]"
        }
      ],
      "name": "unstashBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x855ae9def3989eed28e606d8b4e25b5c1afb8c1ae127ef8920a24205d5c498c7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x70bDA08DBe07363968e9EE53d899dFE48560605B",
    "transactionIndex": 0,
    "gasUsed": "3831160",
    "logsBloom": "0x
    "blockHash": "0x49b3eef2638003873c3e8faa0e7e342fd15dd49b753095e326a172bc59d02381",
    "transactionHash": "0x855ae9def3989eed28e606d8b4e25b5c1afb8c1ae127ef8920a24205d5c498c7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14558195,
        "transactionHash": "0x855ae9def3989eed28e606d8b4e25b5c1afb8c1ae127ef8920a24205d5c498c7",
        "address": "0x70bDA08DBe07363968e9EE53d899dFE48560605B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x49b3eef2638003873c3e8faa0e7e342fd15dd49b753095e326a172bc59d02381"
      }
    ],
    "blockNumber": 14558195,
    "cumulativeGasUsed": "3831160",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "size": 128,
      "batchSize": 1024,
      "deployerDiscountedTiles": 1024
    },
    {
      "mintFee": 999999,
      "mintFeeMin": 9999,
      "bulkDiscount": 999,
      "colorFee": 999
    },
    "https://pixels.watch/api/v1/",
    "0xefAB0Beb0A557E452b398035eA964948c750b2Fd"
  ],
  "numDeployments": 1,
  "solcInputHash": "29e6c251a46367ebfca0380b3613092f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"size\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"batchSize\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"deployerDiscountedTiles\",\"type\":\"uint256\"}],\"internalType\":\"struct Tile.Limits\",\"name\":\"initialLimits\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bulkDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeeMin\",\"type\":\"uint256\"}],\"internalType\":\"struct Tile.Fees\",\"name\":\"initialFees\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"apiUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proxyRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"getMintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOwningAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getOwningAddressBatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintSize\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTiles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedTiles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseUrl\",\"type\":\"string\"}],\"name\":\"setBaseUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bulkDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeeMin\",\"type\":\"uint256\"}],\"internalType\":\"struct Tile.Fees\",\"name\":\"newFees\",\"type\":\"tuple\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"size\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"batchSize\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"deployerDiscountedTiles\",\"type\":\"uint256\"}],\"internalType\":\"struct Tile.Limits\",\"name\":\"newLimits\",\"type\":\"tuple\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"points\",\"type\":\"uint8\"}],\"internalType\":\"struct ERC1155NFT.RoyaltyConfig\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"setRoyaltyConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stasherContract\",\"type\":\"address\"}],\"name\":\"setStasher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tileIds\",\"type\":\"uint256[]\"}],\"name\":\"stashBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tileIds\",\"type\":\"uint256[]\"}],\"name\":\"unstashBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"contractURI()\":{\"details\":\"OpenSea spec metadata for the contract - always \\\"<baseUrl>/contract\\\".\"},\"getMintCost(uint16)\":{\"details\":\"Gets the cost of minting tiles.\",\"params\":{\"amount\":\"the amount of tiles to mint.\"},\"returns\":{\"_0\":\"the cost of minting the given amount of tiles. Cost may be 0 for deployer.\"}},\"getOwningAddress(uint256)\":{\"details\":\"Gets the owner of a given token.\"},\"getOwningAddressBatch(uint256[])\":{\"details\":\"Gets the owner(s) of a given batch of tokens.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}. This also whitelists the ProxyRegistry used by OpenSea.\"},\"maxMintSize()\":{\"details\":\"Gets the current limit for tiles in a single batch.\",\"returns\":{\"_0\":\"the batch limit. If 0, there is no batch limit.\"}},\"maxTiles()\":{\"details\":\"Gets the current limit to tiles.\"},\"mintTo(uint16,address)\":{\"details\":\"Mints tiles in batch.\",\"params\":{\"amount\":\"the amount of tiles to mint.\",\"to\":\"the address to mint tiles to (does not have to be msg.sender).\"}},\"mintedTiles()\":{\"details\":\"Gets the current number of minted tiles (convenience function identical to mintedTokens)\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"See {IERC2981-royaltyInfo}.\",\"returns\":{\"receiver\":\"will always be the address of the deployer of the contract.\",\"royaltyAmount\":\"will always be 7% of value.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns a unique URI for each token, using a \\\"token/<id>\\\" format, for a wider compatibility compared to \\\"{id}\\\" replacement.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintTo(uint16,address)\":{\"notice\":\"Mint `amount` tiles to address `to`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tile.sol\":\"Tile\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/Tile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./lib/ERC1155NFT.sol\\\";\\n\\ncontract Tile is ERC1155NFT {\\n    struct Fees {\\n        // Charged for the first tile minted in a batch.\\n        uint256 mintFee;\\n        // Each tile in the same batch is this much cheaper than the previous one.\\n        uint256 bulkDiscount;\\n        // Minimum fee to be charged for the last tiles in a batch.\\n        uint256 mintFeeMin;\\n    }\\n\\n    struct Limits {\\n        // The size of the board.\\n        uint128 size;\\n        // The maximum number of tiles that can be minted in one batch.\\n        uint16 batchSize;\\n        // The number of tiles that are free for the contract deployer *only*.\\n        uint256 deployerDiscountedTiles;\\n    }\\n\\n    // A contract allowed to stash/unstash tiles (used for making blocks).\\n    address private _stasher = address(0);\\n\\n    // Fees - use getMintCost to query.\\n    Fees private _fees;\\n\\n    // Limits - use maxTiles / maxMintSize to query.\\n    Limits private _limits;\\n\\n    // Account that deployed the contract.\\n    address private _deployer;\\n\\n    constructor(\\n        Limits memory initialLimits,\\n        Fees memory initialFees,\\n        string memory apiUrl,\\n        address proxyRegistryAddress\\n    ) ERC1155NFT(string(abi.encodePacked(apiUrl, \\\"tiles/\\\")), proxyRegistryAddress) {\\n        require(initialFees.mintFeeMin < initialFees.mintFee, \\\"Minimum fee exceeds starting fee\\\");\\n        require(initialLimits.size % 2 == 0, \\\"Size not even\\\");\\n        _fees = Fees({\\n            mintFee: initialFees.mintFee * 10**9,\\n            mintFeeMin: initialFees.mintFeeMin * 10**9,\\n            bulkDiscount: initialFees.bulkDiscount * 10**9\\n        });\\n        _limits = initialLimits;\\n        _deployer = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Gets the current limit to tiles.\\n     */\\n    function maxTiles() public view returns (uint256) {\\n        return _limits.size**2;\\n    }\\n\\n    /**\\n     * @dev Gets the current number of minted tiles\\n     * (convenience function identical to mintedTokens)\\n     */\\n    function mintedTiles() public view returns (uint256) {\\n        return mintedTokens;\\n    }\\n\\n    /**\\n     * @dev Gets the current limit for tiles in a single batch.\\n     * @return the batch limit. If 0, there is no batch limit.\\n     */\\n    function maxMintSize() public view returns (uint16) {\\n        return _limits.batchSize;\\n    }\\n\\n    /**\\n     * @dev Gets the cost of minting tiles.\\n     * @param amount the amount of tiles to mint.\\n     * @return the cost of minting the given amount of tiles. Cost may be 0 for deployer.\\n     */\\n    function getMintCost(uint16 amount) public view returns (uint256) {\\n        // Total owed:\\n        // sum_(x=0)^amount (mintFee - bulkDiscount * x)\\n        // i.e. each subsequent tile is bulkDiscount cheaper than the previous\\n        // one, starting at mintFee for the first one, down to mintFeeMin.\\n        // same as below:\\n        require(mintedTokens + amount <= maxTiles(), \\\"Amount exceeds available\\\");\\n        uint16 exemptAmount = 0;\\n        if (msg.sender == _deployer && _limits.deployerDiscountedTiles > mintedTokens) {\\n            exemptAmount = uint16(Math.min(_limits.deployerDiscountedTiles - mintedTokens, 2**16));\\n        }\\n        if (exemptAmount >= amount) {\\n            return 0;\\n        }\\n        uint256 base = Math.min(\\n            amount - exemptAmount,\\n            (_fees.mintFee - _fees.mintFeeMin) / _fees.bulkDiscount\\n        );\\n        return\\n            base *\\n            (_fees.mintFee - ((base - 1) * _fees.bulkDiscount) / 2) +\\n            (amount - exemptAmount - base) *\\n            _fees.mintFeeMin;\\n    }\\n\\n    /**\\n     * @notice Mint `amount` tiles to address `to`.\\n     * @dev Mints tiles in batch.\\n     * @param amount the amount of tiles to mint.\\n     * @param to the address to mint tiles to (does not have to be msg.sender).\\n     */\\n    function mintTo(uint16 amount, address to) external payable {\\n        require(mintedTokens + amount <= maxTiles(), \\\"Amount exceeds available\\\");\\n        require(maxMintSize() == 0 || amount <= maxMintSize(), \\\"Amount exceeds batch limit\\\");\\n        uint256 transactionTotal = getMintCost(amount);\\n        require(msg.value >= transactionTotal, \\\"Must pay for mint\\\");\\n        uint256[] memory tileIds = new uint256[](amount);\\n        uint256[] memory ones = new uint256[](amount);\\n        for (uint16 i = 0; i < amount; i++) {\\n            tileIds[i] = mintedTokens + i;\\n            ones[i] = 1;\\n            _tokenOwners.push(to);\\n        }\\n        mintedTokens += amount;\\n        _doSafeBatchTransferAcceptanceCheck(msg.sender, address(0), to, tileIds, ones, \\\"\\\");\\n        emit TransferBatch(msg.sender, address(0), to, tileIds, ones);\\n    }\\n\\n    // Stasher API.\\n\\n    modifier onlyStasher() {\\n        require(_stasher == msg.sender, \\\"Not a designated stasher\\\");\\n        _;\\n    }\\n\\n    function stashBatch(address from, uint256[] memory tileIds) external onlyStasher {\\n        uint256[] memory ones = new uint256[](tileIds.length);\\n        for (uint256 i = 0; i < tileIds.length; ++i) {\\n            uint256 id = tileIds[i];\\n\\n            require(_tokenOwners[id] == from, \\\"ERC1155: insufficient balance\\\");\\n            _tokenOwners[id] = address(0);\\n            ones[i] = 1;\\n        }\\n        emit TransferBatch(msg.sender, from, address(0), tileIds, ones);\\n    }\\n\\n    function unstashBatch(address to, uint256[] memory tileIds) external onlyStasher {\\n        uint256[] memory ones = new uint256[](tileIds.length);\\n        for (uint256 i = 0; i < tileIds.length; i++) {\\n            require(tileIds[i] < mintedTokens, \\\"Token does not exist\\\");\\n            ones[i] = 1;\\n        }\\n        _safeBatchTransferFrom(address(0), to, tileIds, ones, \\\"\\\");\\n    }\\n\\n    // Owner API.\\n\\n    function setFees(Fees memory newFees) external onlyOwner {\\n        require(newFees.mintFeeMin < newFees.mintFee, \\\"Minimum fee exceeds starting fee\\\");\\n        _fees = Fees({\\n            mintFee: newFees.mintFee * 10**9,\\n            mintFeeMin: newFees.mintFeeMin * 10**9,\\n            bulkDiscount: newFees.bulkDiscount * 10**9\\n        });\\n    }\\n\\n    function setLimits(Limits memory newLimits) external onlyOwner {\\n        require(newLimits.size % 2 == 0, \\\"Size not even\\\");\\n        require(newLimits.size >= _limits.size, \\\"Size smaller than current\\\");\\n        require(\\n            newLimits.deployerDiscountedTiles == _limits.deployerDiscountedTiles,\\n            \\\"Deployer discount changed\\\"\\n        );\\n        _limits = newLimits;\\n    }\\n\\n    function setBaseUrl(string memory newBaseUrl) public virtual override onlyOwner {\\n        super.setBaseUrl(string(abi.encodePacked(newBaseUrl, \\\"tile/\\\")));\\n    }\\n\\n    function setStasher(address stasherContract) external onlyOwner {\\n        _stasher = stasherContract;\\n    }\\n}\\n\",\"keccak256\":\"0x6779da29bf751c5f1d7bcf53df718a22c8a4821b58a29ca3869b97b4f0b2e3cf\",\"license\":\"MIT\"},\"contracts/lib/ERC1155NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./ProxyRegistry.sol\\\";\\nimport \\\"./IERC2981.sol\\\";\\n\\n// This is largely replicating OpenZeppelin's ERC1155 - private access to owner\\n// mapping was needed for stashing.\\ncontract ERC1155NFT is ERC165, IERC1155, IERC1155MetadataURI, IERC2981, Ownable {\\n    using Address for address;\\n\\n    struct RoyaltyConfig {\\n        // The receiving address of royalty charges.\\n        address target;\\n        // The percentage points (in tenths of a %) to charge in royalties.\\n        uint8 points;\\n    }\\n\\n    // Tokens currently minted.\\n    uint256 public mintedTokens = 0;\\n\\n    // Mapping to owners (0 for stashed tokens).\\n    address[] internal _tokenOwners;\\n\\n    // Wyvern proxy registry address.\\n    address private _proxyRegistryAddress;\\n\\n    // Manual proxies.\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Base URL of API.\\n    string private _baseUrl;\\n\\n    // An address to send royalties for NFT trading to. Can only be set by owner.\\n    RoyaltyConfig private _royaltyConfig;\\n\\n    constructor(string memory apiUrl, address proxyRegistryAddress) {\\n        _baseUrl = apiUrl;\\n        _proxyRegistryAddress = proxyRegistryAddress;\\n        _royaltyConfig = RoyaltyConfig({\\n            target: msg.sender,\\n            points: 70 // 7%\\n        });\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns a unique URI for each token, using a\\n     * \\\"token/<id>\\\" format, for a wider compatibility compared to \\\"{id}\\\"\\n     * replacement.\\n     */\\n    function uri(uint256 id) external view override returns (string memory) {\\n        require(id < mintedTokens, \\\"Token does not exist\\\");\\n        return string(abi.encodePacked(_baseUrl, \\\"token/\\\", Strings.toString(id)));\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance for address(0)\\\");\\n        require(id < mintedTokens, \\\"Token does not exist\\\");\\n        return _tokenOwners[id] == account ? 1 : 0;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts/ids mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev Gets the owner of a given token.\\n     */\\n    function getOwningAddress(uint256 id) external view returns (address) {\\n        return _tokenOwners[id];\\n    }\\n\\n    /**\\n     * @dev Gets the owner(s) of a given batch of tokens.\\n     */\\n    function getOwningAddressBatch(uint256[] memory ids) external view returns (address[] memory) {\\n        address[] memory batchOwners = new address[](ids.length);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            batchOwners[i] = _tokenOwners[ids[i]];\\n        }\\n\\n        return batchOwners;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}. This also whitelists the ProxyRegistry used by OpenSea.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        ProxyRegistry proxyRegistry = ProxyRegistry(_proxyRegistryAddress);\\n        if (address(proxyRegistry.proxies(account)) == operator) {\\n            return true;\\n        }\\n\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external override {\\n        require(id < mintedTokens, \\\"Token does not exist\\\");\\n        require(amount == 1, \\\"Cannot transfer amount > 1\\\");\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"ERC1155: caller is not approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"ERC1155: caller is not approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC2981-royaltyInfo}.\\n     * @return receiver will always be the address of the deployer of the contract.\\n     * @return royaltyAmount will always be 7% of value.\\n     */\\n    function royaltyInfo(uint256, uint256 value)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        receiver = _royaltyConfig.target;\\n        royaltyAmount = (value * _royaltyConfig.points) / 1000;\\n    }\\n\\n    /**\\n     * @dev OpenSea spec metadata for the contract - always \\\"<baseUrl>/contract\\\".\\n     */\\n    function contractURI() external view returns (string memory) {\\n        return string(abi.encodePacked(_baseUrl, \\\"contract\\\"));\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_tokenOwners[id] == from, \\\"ERC1155: insufficient balance\\\");\\n\\n        _tokenOwners[id] = to;\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids/amounts mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n\\n        uint256[] memory ones = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n            require(id < mintedTokens, \\\"Token does not exist\\\");\\n            require(amount == 1, \\\"Cannot transfer amount > 1\\\");\\n\\n            require(_tokenOwners[id] == from, \\\"ERC1155: insufficient balance\\\");\\n            _tokenOwners[id] = to;\\n            ones[i] = 0;\\n        }\\n        emit TransferBatch(msg.sender, from, to, ids, ones);\\n\\n        _doSafeBatchTransferAcceptanceCheck(msg.sender, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens.\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) private {\\n        require(owner != operator, \\\"ERC1155: cannot approve self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver reject\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: to not ERC1155Receiver\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data)\\n            returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver reject\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: to not ERC1155Receiver\\\");\\n            }\\n        }\\n    }\\n\\n    // Owner API.\\n\\n    function withdraw(address payable wallet, uint256 amount) external onlyOwner {\\n        wallet.transfer(amount);\\n    }\\n\\n    function setRoyaltyConfig(RoyaltyConfig memory newConfig) external onlyOwner {\\n        _royaltyConfig = newConfig;\\n    }\\n\\n    function setBaseUrl(string memory newBaseUrl) public virtual onlyOwner {\\n        _baseUrl = newBaseUrl;\\n    }\\n}\\n\",\"keccak256\":\"0x2b9539198a23416547dd8462f27eba2ceba0a4d74d529be1e7f89fa6a46a4046\",\"license\":\"MIT\"},\"contracts/lib/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IERC2981 is IERC165 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x1d0742dbd57f4f5e1bb9c89415d0c80ecbfeb98630d19881c5a6073fb878926a\",\"license\":\"MIT\"},\"contracts/lib/ProxyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n\\ncontract OwnableDelegateProxy {} // solhint-disable-line\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\",\"keccak256\":\"0x8e1422ee43075747741606f5f0a5aac7019b7685baa514ef95cf6e5ec8b24dc1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600155600780546001600160a01b03191690553480156200002657600080fd5b50604051620045be380380620045be8339810160408190526200004991620004b8565b816040516020016200005c919062000582565b60408051808303601f1901815291905281620000783362000263565b81516200008d906005906020850190620002b3565b50600380546001600160a01b0319166001600160a01b039290921691909117905550604080518082018252338082526046602090920191909152600680546001600160a81b03191660ff60a01b1990921691909117602360a11b17905583519084015110620001435760405162461bcd60e51b815260206004820181905260248201527f4d696e696d756d206665652065786365656473207374617274696e672066656560448201526064015b60405180910390fd5b83516200015390600290620005ae565b6001600160801b0316156200019b5760405162461bcd60e51b815260206004820152600d60248201526c29b4bd32903737ba1032bb32b760991b60448201526064016200013a565b60405180606001604052808460000151633b9aca00620001bc9190620005e3565b81526020018460200151633b9aca00620001d79190620005e3565b81526020018460400151633b9aca00620001f29190620005e3565b90528051600855602080820151600955604091820151600a558551600b80549288015161ffff16600160801b026001600160901b03199093166001600160801b03909216919091179190911790559390930151600c555050600d80546001600160a01b03191633179055506200064d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620002c19062000611565b90600052602060002090601f016020900481019282620002e5576000855562000330565b82601f106200030057805160ff191683800117855562000330565b8280016001018555821562000330579182015b828111156200033057825182559160200191906001019062000313565b506200033e92915062000342565b5090565b5b808211156200033e576000815560010162000343565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000394576200039462000359565b60405290565b600060608284031215620003ad57600080fd5b620003b76200036f565b905081518152602082015160208201526040820151604082015292915050565b60005b83811015620003f4578181015183820152602001620003da565b8381111562000404576000848401525b50505050565b600082601f8301126200041c57600080fd5b81516001600160401b038082111562000439576200043962000359565b604051601f8301601f19908116603f0116810190828211818310171562000464576200046462000359565b816040528381528660208588010111156200047e57600080fd5b62000491846020830160208901620003d7565b9695505050505050565b80516001600160a01b0381168114620004b357600080fd5b919050565b600080600080848603610100811215620004d157600080fd5b6060811215620004e057600080fd5b50620004eb6200036f565b85516001600160801b03811681146200050357600080fd5b8152602086015161ffff811681146200051b57600080fd5b60208201526040868101519082015293506200053b86606087016200039a565b60c08601519093506001600160401b038111156200055857600080fd5b62000566878288016200040a565b9250506200057760e086016200049b565b905092959194509250565b6000825162000596818460208701620003d7565b6574696c65732f60d01b920191825250600601919050565b60006001600160801b0383811680620005d757634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b60008160001904831182151516156200060c57634e487b7160e01b600052601160045260246000fd5b500290565b600181811c908216806200062657607f821691505b6020821081036200064757634e487b7160e01b600052602260045260246000fd5b50919050565b613f61806200065d6000396000f3fe6080604052600436106101c15760003560e01c80638da5cb5b116100f7578063abfcf1e911610095578063e985e9c511610064578063e985e9c514610566578063f242432a14610586578063f2fde38b146105a6578063f3fef3a3146105c657600080fd5b8063abfcf1e9146104e4578063c494975f14610504578063c7c3268b14610531578063e8a3d4851461055157600080fd5b80639aeea063116100d15780639aeea0631461047a578063a22cb4651461048f578063a7701fa5146104af578063a823ce29146104cf57600080fd5b80638da5cb5b1461041c5780639327f04e1461044757806399b71f321461046757600080fd5b80632eb2c2d611610164578063535597b51161013e578063535597b51461038c578063715018a6146103d15780637d1391b6146103e65780638d75fe051461040657600080fd5b80632eb2c2d61461031f5780634da488b61461033f5780634e1273f41461035f57600080fd5b806316b8060c116101a057806316b8060c146102565780631c1a723014610291578063204e6dfa146102b35780632a55205a146102d357600080fd5b8062fdd58e146101c657806301ffc9a7146101f95780630e89341c14610229575b600080fd5b3480156101d257600080fd5b506101e66101e1366004612fea565b6105e6565b6040519081526020015b60405180910390f35b34801561020557600080fd5b50610219610214366004613044565b61073c565b60405190151581526020016101f0565b34801561023557600080fd5b50610249610244366004613061565b61086b565b6040516101f091906130f4565b34801561026257600080fd5b50600b54700100000000000000000000000000000000900461ffff1660405161ffff90911681526020016101f0565b34801561029d57600080fd5b506102b16102ac3660046131a7565b61090a565b005b3480156102bf57600080fd5b506101e66102ce3660046131fe565b610a63565b3480156102df57600080fd5b506102f36102ee366004613219565b610c00565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016101f0565b34801561032b57600080fd5b506102b161033a36600461336c565b610c5a565b34801561034b57600080fd5b506102b161035a36600461341a565b610cfd565b34801561036b57600080fd5b5061037f61037a36600461347f565b610dec565b6040516101f09190613587565b34801561039857600080fd5b506103ac6103a7366004613061565b610f1e565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f0565b3480156103dd57600080fd5b506102b1610f5b565b3480156103f257600080fd5b506102b161040136600461359a565b610fe8565b34801561041257600080fd5b506101e660015481565b34801561042857600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166103ac565b34801561045357600080fd5b506102b16104623660046135e0565b6112a0565b6102b16104753660046135fd565b611368565b34801561048657600080fd5b506001546101e6565b34801561049b57600080fd5b506102b16104aa366004613634565b611754565b3480156104bb57600080fd5b506102b16104ca36600461359a565b611763565b3480156104db57600080fd5b506101e6611910565b3480156104f057600080fd5b506102b16104ff366004613667565b61194b565b34801561051057600080fd5b5061052461051f3660046136cc565b611bb2565b6040516101f09190613701565b34801561053d57600080fd5b506102b161054c36600461375b565b611cad565b34801561055d57600080fd5b50610249611d59565b34801561057257600080fd5b506102196105813660046137a4565b611d81565b34801561059257600080fd5b506102b16105a13660046137c2565b611e7f565b3480156105b257600080fd5b506102b16105c13660046135e0565b611ff0565b3480156105d257600080fd5b506102b16105e1366004612fea565b61211d565b600073ffffffffffffffffffffffffffffffffffffffff831661066a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a2062616c616e636520666f7220616464726573732830290060448201526064015b60405180910390fd5b60015482106106d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610661565b8273ffffffffffffffffffffffffffffffffffffffff16600283815481106106ff576106ff61382b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461072d576000610730565b60015b60ff1690505b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a260000000000000000000000000000000000000000000000000000000014806107cf57507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061081b57507fffffffff0000000000000000000000000000000000000000000000000000000082167f2a55205a00000000000000000000000000000000000000000000000000000000145b8061073657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610736565b606060015482106108d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610661565b60056108e3836121e1565b6040516020016108f492919061397d565b6040516020818303038152906040529050919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461098b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b80516040820151106109f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d696e696d756d206665652065786365656473207374617274696e67206665656044820152606401610661565b60405180606001604052808260000151633b9aca00610a1891906139fa565b81526020018260200151633b9aca00610a3191906139fa565b81526020018260400151633b9aca00610a4a91906139fa565b90528051600855602081015160095560400151600a5550565b6000610a6d611910565b8261ffff16600154610a7f9190613a37565b1115610ae7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416d6f756e74206578636565647320617661696c61626c6500000000000000006044820152606401610661565b600d5460009073ffffffffffffffffffffffffffffffffffffffff1633148015610b145750600154600c54115b15610b3857600154600c54610b3591610b2c91613a4f565b62010000612316565b90505b8261ffff168161ffff1610610b505750600092915050565b6000610b89610b5f8386613a66565b600954600a5460085461ffff9390931692610b7a9190613a4f565b610b849190613ab8565b612316565b600a5490915081610b9a8487613a66565b61ffff16610ba89190613a4f565b610bb291906139fa565b600954600290610bc3600185613a4f565b610bcd91906139fa565b610bd79190613ab8565b600854610be49190613a4f565b610bee90836139fa565b610bf89190613a37565b949350505050565b60065473ffffffffffffffffffffffffffffffffffffffff8116906000906103e890610c479074010000000000000000000000000000000000000000900460ff16856139fa565b610c519190613ab8565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff8516331480610c835750610c838533611d81565b610ce9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a2063616c6c6572206973206e6f7420617070726f766564006044820152606401610661565b610cf6858585858561232e565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b80516006805460209093015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090931673ffffffffffffffffffffffffffffffffffffffff90921691909117919091179055565b60608151835114610e59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f455243313135353a206163636f756e74732f696473206d69736d6174636800006044820152606401610661565b6000835167ffffffffffffffff811115610e7557610e75613107565b604051908082528060200260200182016040528015610e9e578160200160208202803683370190505b50905060005b8451811015610f1657610ee9858281518110610ec257610ec261382b565b6020026020010151858381518110610edc57610edc61382b565b60200260200101516105e6565b828281518110610efb57610efb61382b565b6020908102919091010152610f0f81613acc565b9050610ea4565b509392505050565b600060028281548110610f3357610f3361382b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610fdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b610fe66000612752565b565b60075473ffffffffffffffffffffffffffffffffffffffff163314611069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f7420612064657369676e61746564207374617368657200000000000000006044820152606401610661565b6000815167ffffffffffffffff81111561108557611085613107565b6040519080825280602002602001820160405280156110ae578160200160208202803683370190505b50905060005b825181101561121b5760008382815181106110d1576110d161382b565b602002602001015190508473ffffffffffffffffffffffffffffffffffffffff16600282815481106111055761110561382b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461118e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f455243313135353a20696e73756666696369656e742062616c616e63650000006044820152606401610661565b6000600282815481106111a3576111a361382b565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018383815181106111ff576111ff61382b565b60209081029190910101525061121481613acc565b90506110b4565b50600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8585604051611293929190613b04565b60405180910390a4505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611370611910565b8261ffff166001546113829190613a37565b11156113ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416d6f756e74206578636565647320617661696c61626c6500000000000000006044820152606401610661565b600b54700100000000000000000000000000000000900461ffff1615806114335750600b54700100000000000000000000000000000000900461ffff1661ffff168261ffff1611155b611499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f416d6f756e742065786365656473206261746368206c696d69740000000000006044820152606401610661565b60006114a483610a63565b905080341015611510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4d7573742070617920666f72206d696e740000000000000000000000000000006044820152606401610661565b60008361ffff1667ffffffffffffffff81111561152f5761152f613107565b604051908082528060200260200182016040528015611558578160200160208202803683370190505b50905060008461ffff1667ffffffffffffffff81111561157a5761157a613107565b6040519080825280602002602001820160405280156115a3578160200160208202803683370190505b50905060005b8561ffff168161ffff161015611692578061ffff166001546115cb9190613a37565b838261ffff16815181106115e1576115e161382b565b6020026020010181815250506001828261ffff16815181106116055761160561382b565b6020908102919091010152600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790558061168a81613b32565b9150506115a9565b508461ffff16600160008282546116a99190613a37565b925050819055506116ce336000868585604051806020016040528060008152506127c7565b8373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8585604051611745929190613b04565b60405180910390a45050505050565b61175f338383612a0e565b5050565b60075473ffffffffffffffffffffffffffffffffffffffff1633146117e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f7420612064657369676e61746564207374617368657200000000000000006044820152606401610661565b6000815167ffffffffffffffff81111561180057611800613107565b604051908082528060200260200182016040528015611829578160200160208202803683370190505b50905060005b82518110156118ed5760015483828151811061184d5761184d61382b565b6020026020010151106118bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610661565b60018282815181106118d0576118d061382b565b6020908102919091010152806118e581613acc565b91505061182f565b5061190b60008484846040518060200160405280600081525061232e565b505050565b600b54600090611934906002906fffffffffffffffffffffffffffffffff16613c94565b6fffffffffffffffffffffffffffffffff16905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146119cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b80516119da90600290613cb5565b6fffffffffffffffffffffffffffffffff1615611a53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f53697a65206e6f74206576656e000000000000000000000000000000000000006044820152606401610661565b600b5481516fffffffffffffffffffffffffffffffff91821691161015611ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f53697a6520736d616c6c6572207468616e2063757272656e74000000000000006044820152606401610661565b600c54604082015114611b45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4465706c6f79657220646973636f756e74206368616e676564000000000000006044820152606401610661565b8051600b8054602084015161ffff16700100000000000000000000000000000000027fffffffffffffffffffffffffffff0000000000000000000000000000000000009091166fffffffffffffffffffffffffffffffff9093169290921791909117905560400151600c55565b60606000825167ffffffffffffffff811115611bd057611bd0613107565b604051908082528060200260200182016040528015611bf9578160200160208202803683370190505b50905060005b8351811015611ca6576002848281518110611c1c57611c1c61382b565b602002602001015181548110611c3457611c3461382b565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110611c7157611c7161382b565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152611c9f81613acc565b9050611bff565b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611d2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b611d5681604051602001611d429190613ce4565b604051602081830303815290604052612b3b565b50565b60606005604051602001611d6d9190613d25565b604051602081830303815290604052905090565b6003546040517fc455279100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260009281169190841690829063c455279190602401602060405180830381865afa158015611df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1d9190613d5e565b73ffffffffffffffffffffffffffffffffffffffff1603611e42576001915050610736565b505073ffffffffffffffffffffffffffffffffffffffff918216600090815260046020908152604080832093909416825291909152205460ff1690565b6001548310611eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610661565b81600114611f54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e6e6f74207472616e7366657220616d6f756e74203e20310000000000006044820152606401610661565b73ffffffffffffffffffffffffffffffffffffffff8516331480611f7d5750611f7d8533611d81565b611fe3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a2063616c6c6572206973206e6f7420617070726f766564006044820152606401610661565b610cf68585858585612bcf565b60005473ffffffffffffffffffffffffffffffffffffffff163314612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b73ffffffffffffffffffffffffffffffffffffffff8116612114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610661565b611d5681612752565b60005473ffffffffffffffffffffffffffffffffffffffff16331461219e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f1935050505015801561190b573d6000803e3d6000fd5b60608160000361222457505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561224e578061223881613acc565b91506122479050600a83613ab8565b9150612228565b60008167ffffffffffffffff81111561226957612269613107565b6040519080825280601f01601f191660200182016040528015612293576020820181803683370190505b5090505b8415610bf8576122a8600183613a4f565b91506122b5600a86613d7b565b6122c0906030613a37565b60f81b8183815181106122d5576122d561382b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061230f600a86613ab8565b9450612297565b60008183106123255781612327565b825b9392505050565b8151835114612399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f455243313135353a206964732f616d6f756e7473206d69736d617463680000006044820152606401610661565b73ffffffffffffffffffffffffffffffffffffffff8416612416576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a207472616e7366657220746f2061646472657373283029006044820152606401610661565b6000835167ffffffffffffffff81111561243257612432613107565b60405190808252806020026020018201604052801561245b578160200160208202803683370190505b50905060005b84518110156126bd57600085828151811061247e5761247e61382b565b60200260200101519050600085838151811061249c5761249c61382b565b602002602001015190506001548210612511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610661565b8060011461257b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e6e6f74207472616e7366657220616d6f756e74203e20310000000000006044820152606401610661565b8873ffffffffffffffffffffffffffffffffffffffff16600283815481106125a5576125a561382b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461262e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f455243313135353a20696e73756666696369656e742062616c616e63650000006044820152606401610661565b87600283815481106126425761264261382b565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600084848151811061269e5761269e61382b565b6020026020010181815250505050806126b690613acc565b9050612461565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8785604051612734929190613b04565b60405180910390a461274a3387878787876127c7565b505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff84163b1561274a576040517fbc197c8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063bc197c819061283e9089908990889088908890600401613d8f565b6020604051808303816000875af1925050508015612897575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261289491810190613dfa565b60015b61295a576128a3613e17565b806308c379a0036128f657506128b7613e33565b806128c257506128f8565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066191906130f4565b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a20746f206e6f7420455243313135355265636569766572006044820152606401610661565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c810000000000000000000000000000000000000000000000000000000014612a05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a204552433131353552656365697665722072656a656374006044820152606401610661565b50505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612aa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f455243313135353a2063616e6e6f7420617070726f76652073656c66000000006044820152606401610661565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526004602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612bbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b805161175f906005906020840190612f2f565b73ffffffffffffffffffffffffffffffffffffffff8416612c4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a207472616e7366657220746f2061646472657373283029006044820152606401610661565b8473ffffffffffffffffffffffffffffffffffffffff1660028481548110612c7657612c7661382b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614612cff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f455243313135353a20696e73756666696369656e742062616c616e63650000006044820152606401610661565b8360028481548110612d1357612d1361382b565b60009182526020918290200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff938416179055604080518681529182018590528683169288169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610cf633868686868673ffffffffffffffffffffffffffffffffffffffff84163b1561274a576040517ff23a6e6100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063f23a6e6190612e1f9089908990889088908890600401613edb565b6020604051808303816000875af1925050508015612e78575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612e7591810190613dfa565b60015b612e84576128a3613e17565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e610000000000000000000000000000000000000000000000000000000014612a05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a204552433131353552656365697665722072656a656374006044820152606401610661565b828054612f3b9061385a565b90600052602060002090601f016020900481019282612f5d5760008555612fa3565b82601f10612f7657805160ff1916838001178555612fa3565b82800160010185558215612fa3579182015b82811115612fa3578251825591602001919060010190612f88565b50612faf929150612fb3565b5090565b5b80821115612faf5760008155600101612fb4565b73ffffffffffffffffffffffffffffffffffffffff81168114611d5657600080fd5b60008060408385031215612ffd57600080fd5b823561300881612fc8565b946020939093013593505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114611d5657600080fd5b60006020828403121561305657600080fd5b813561232781613016565b60006020828403121561307357600080fd5b5035919050565b60005b8381101561309557818101518382015260200161307d565b838111156130a4576000848401525b50505050565b600081518084526130c281602086016020860161307a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061232760208301846130aa565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810181811067ffffffffffffffff8211171561315657613156613107565b60405250565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff821117156131a0576131a0613107565b6040525050565b6000606082840312156131b957600080fd5b6040516131c581613136565b8235815260208301356020820152604083013560408201528091505092915050565b803561ffff811681146131f957600080fd5b919050565b60006020828403121561321057600080fd5b612327826131e7565b6000806040838503121561322c57600080fd5b50508035926020909101359150565b600067ffffffffffffffff82111561325557613255613107565b5060051b60200190565b600082601f83011261327057600080fd5b8135602061327d8261323b565b60405161328a828261315c565b83815260059390931b85018201928281019150868411156132aa57600080fd5b8286015b848110156132c557803583529183019183016132ae565b509695505050505050565b600067ffffffffffffffff8311156132ea576132ea613107565b60405161331f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f870116018261315c565b80915083815284848401111561333457600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261335d57600080fd5b612327838335602085016132d0565b600080600080600060a0868803121561338457600080fd5b853561338f81612fc8565b9450602086013561339f81612fc8565b9350604086013567ffffffffffffffff808211156133bc57600080fd5b6133c889838a0161325f565b945060608801359150808211156133de57600080fd5b6133ea89838a0161325f565b9350608088013591508082111561340057600080fd5b5061340d8882890161334c565b9150509295509295909350565b60006040828403121561342c57600080fd5b6040516040810181811067ffffffffffffffff8211171561344f5761344f613107565b604052823561345d81612fc8565b8152602083013560ff8116811461347357600080fd5b60208201529392505050565b6000806040838503121561349257600080fd5b823567ffffffffffffffff808211156134aa57600080fd5b818501915085601f8301126134be57600080fd5b813560206134cb8261323b565b6040516134d8828261315c565b83815260059390931b85018201928281019150898411156134f857600080fd5b948201945b8386101561351f57853561351081612fc8565b825294820194908201906134fd565b9650508601359250508082111561353557600080fd5b506135428582860161325f565b9150509250929050565b600081518084526020808501945080840160005b8381101561357c57815187529582019590820190600101613560565b509495945050505050565b602081526000612327602083018461354c565b600080604083850312156135ad57600080fd5b82356135b881612fc8565b9150602083013567ffffffffffffffff8111156135d457600080fd5b6135428582860161325f565b6000602082840312156135f257600080fd5b813561232781612fc8565b6000806040838503121561361057600080fd5b613619836131e7565b9150602083013561362981612fc8565b809150509250929050565b6000806040838503121561364757600080fd5b823561365281612fc8565b91506020830135801515811461362957600080fd5b60006060828403121561367957600080fd5b60405161368581613136565b82356fffffffffffffffffffffffffffffffff811681146136a557600080fd5b81526136b3602084016131e7565b6020820152604083013560408201528091505092915050565b6000602082840312156136de57600080fd5b813567ffffffffffffffff8111156136f557600080fd5b610bf88482850161325f565b6020808252825182820181905260009190848201906040850190845b8181101561374f57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161371d565b50909695505050505050565b60006020828403121561376d57600080fd5b813567ffffffffffffffff81111561378457600080fd5b8201601f8101841361379557600080fd5b610bf8848235602084016132d0565b600080604083850312156137b757600080fd5b823561361981612fc8565b600080600080600060a086880312156137da57600080fd5b85356137e581612fc8565b945060208601356137f581612fc8565b93506040860135925060608601359150608086013567ffffffffffffffff81111561381f57600080fd5b61340d8882890161334c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c9082168061386e57607f821691505b6020821081036138a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8054600090600181811c90808316806138c757607f831692505b60208084108203613901577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b818015613915576001811461394457613971565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650613971565b60008881526020902060005b868110156139695781548b820152908501908301613950565b505084890196505b50505050505092915050565b600061398982856138ad565b7f746f6b656e2f0000000000000000000000000000000000000000000000000000815283516139bf81600684016020880161307a565b01600601949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a3257613a326139cb565b500290565b60008219821115613a4a57613a4a6139cb565b500190565b600082821015613a6157613a616139cb565b500390565b600061ffff83811690831681811015613a8157613a816139cb565b039392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613ac757613ac7613a89565b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613afd57613afd6139cb565b5060010190565b604081526000613b17604083018561354c565b8281036020840152613b29818561354c565b95945050505050565b600061ffff808316818103613b4957613b496139cb565b6001019392505050565b600181815b80851115613b9c57816fffffffffffffffffffffffffffffffff04821115613b8257613b826139cb565b80851615613b8f57918102915b93841c9390800290613b58565b509250929050565b600082613bb357506001610736565b81613bc057506000610736565b8160018114613bd65760028114613be057613c1d565b6001915050610736565b60ff841115613bf157613bf16139cb565b6001841b91506fffffffffffffffffffffffffffffffff821115613c1757613c176139cb565b50610736565b5060208310610133831016604e8410600b8410161715613c60575081810a6fffffffffffffffffffffffffffffffff811115613c5b57613c5b6139cb565b610736565b613c6a8383613b53565b806fffffffffffffffffffffffffffffffff04821115613c8c57613c8c6139cb565b029392505050565b600061232760ff84166fffffffffffffffffffffffffffffffff8416613ba4565b60006fffffffffffffffffffffffffffffffff80841680613cd857613cd8613a89565b92169190910692915050565b60008251613cf681846020870161307a565b7f74696c652f000000000000000000000000000000000000000000000000000000920191825250600501919050565b6000613d3182846138ad565b7f636f6e747261637400000000000000000000000000000000000000000000000081526008019392505050565b600060208284031215613d7057600080fd5b815161232781612fc8565b600082613d8a57613d8a613a89565b500690565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a06040830152613dc860a083018661354c565b8281036060840152613dda818661354c565b90508281036080840152613dee81856130aa565b98975050505050505050565b600060208284031215613e0c57600080fd5b815161232781613016565b600060033d1115613e305760046000803e5060005160e01c5b90565b600060443d1015613e415790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715613e8f57505050505090565b8285019150815181811115613ea75750505050505090565b843d8701016020828501011115613ec15750505050505090565b613ed06020828601018761315c565b509095945050505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015283606083015260a06080830152613f2060a08301846130aa565b97965050505050505056fea264697066735822122086930e36fb7f74502a42ee9bb4a172547b11beb1fc6381909d11e21faa782a1064736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101c15760003560e01c80638da5cb5b116100f7578063abfcf1e911610095578063e985e9c511610064578063e985e9c514610566578063f242432a14610586578063f2fde38b146105a6578063f3fef3a3146105c657600080fd5b8063abfcf1e9146104e4578063c494975f14610504578063c7c3268b14610531578063e8a3d4851461055157600080fd5b80639aeea063116100d15780639aeea0631461047a578063a22cb4651461048f578063a7701fa5146104af578063a823ce29146104cf57600080fd5b80638da5cb5b1461041c5780639327f04e1461044757806399b71f321461046757600080fd5b80632eb2c2d611610164578063535597b51161013e578063535597b51461038c578063715018a6146103d15780637d1391b6146103e65780638d75fe051461040657600080fd5b80632eb2c2d61461031f5780634da488b61461033f5780634e1273f41461035f57600080fd5b806316b8060c116101a057806316b8060c146102565780631c1a723014610291578063204e6dfa146102b35780632a55205a146102d357600080fd5b8062fdd58e146101c657806301ffc9a7146101f95780630e89341c14610229575b600080fd5b3480156101d257600080fd5b506101e66101e1366004612fea565b6105e6565b6040519081526020015b60405180910390f35b34801561020557600080fd5b50610219610214366004613044565b61073c565b60405190151581526020016101f0565b34801561023557600080fd5b50610249610244366004613061565b61086b565b6040516101f091906130f4565b34801561026257600080fd5b50600b54700100000000000000000000000000000000900461ffff1660405161ffff90911681526020016101f0565b34801561029d57600080fd5b506102b16102ac3660046131a7565b61090a565b005b3480156102bf57600080fd5b506101e66102ce3660046131fe565b610a63565b3480156102df57600080fd5b506102f36102ee366004613219565b610c00565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016101f0565b34801561032b57600080fd5b506102b161033a36600461336c565b610c5a565b34801561034b57600080fd5b506102b161035a36600461341a565b610cfd565b34801561036b57600080fd5b5061037f61037a36600461347f565b610dec565b6040516101f09190613587565b34801561039857600080fd5b506103ac6103a7366004613061565b610f1e565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f0565b3480156103dd57600080fd5b506102b1610f5b565b3480156103f257600080fd5b506102b161040136600461359a565b610fe8565b34801561041257600080fd5b506101e660015481565b34801561042857600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166103ac565b34801561045357600080fd5b506102b16104623660046135e0565b6112a0565b6102b16104753660046135fd565b611368565b34801561048657600080fd5b506001546101e6565b34801561049b57600080fd5b506102b16104aa366004613634565b611754565b3480156104bb57600080fd5b506102b16104ca36600461359a565b611763565b3480156104db57600080fd5b506101e6611910565b3480156104f057600080fd5b506102b16104ff366004613667565b61194b565b34801561051057600080fd5b5061052461051f3660046136cc565b611bb2565b6040516101f09190613701565b34801561053d57600080fd5b506102b161054c36600461375b565b611cad565b34801561055d57600080fd5b50610249611d59565b34801561057257600080fd5b506102196105813660046137a4565b611d81565b34801561059257600080fd5b506102b16105a13660046137c2565b611e7f565b3480156105b257600080fd5b506102b16105c13660046135e0565b611ff0565b3480156105d257600080fd5b506102b16105e1366004612fea565b61211d565b600073ffffffffffffffffffffffffffffffffffffffff831661066a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a2062616c616e636520666f7220616464726573732830290060448201526064015b60405180910390fd5b60015482106106d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610661565b8273ffffffffffffffffffffffffffffffffffffffff16600283815481106106ff576106ff61382b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461072d576000610730565b60015b60ff1690505b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a260000000000000000000000000000000000000000000000000000000014806107cf57507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061081b57507fffffffff0000000000000000000000000000000000000000000000000000000082167f2a55205a00000000000000000000000000000000000000000000000000000000145b8061073657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610736565b606060015482106108d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610661565b60056108e3836121e1565b6040516020016108f492919061397d565b6040516020818303038152906040529050919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461098b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b80516040820151106109f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d696e696d756d206665652065786365656473207374617274696e67206665656044820152606401610661565b60405180606001604052808260000151633b9aca00610a1891906139fa565b81526020018260200151633b9aca00610a3191906139fa565b81526020018260400151633b9aca00610a4a91906139fa565b90528051600855602081015160095560400151600a5550565b6000610a6d611910565b8261ffff16600154610a7f9190613a37565b1115610ae7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416d6f756e74206578636565647320617661696c61626c6500000000000000006044820152606401610661565b600d5460009073ffffffffffffffffffffffffffffffffffffffff1633148015610b145750600154600c54115b15610b3857600154600c54610b3591610b2c91613a4f565b62010000612316565b90505b8261ffff168161ffff1610610b505750600092915050565b6000610b89610b5f8386613a66565b600954600a5460085461ffff9390931692610b7a9190613a4f565b610b849190613ab8565b612316565b600a5490915081610b9a8487613a66565b61ffff16610ba89190613a4f565b610bb291906139fa565b600954600290610bc3600185613a4f565b610bcd91906139fa565b610bd79190613ab8565b600854610be49190613a4f565b610bee90836139fa565b610bf89190613a37565b949350505050565b60065473ffffffffffffffffffffffffffffffffffffffff8116906000906103e890610c479074010000000000000000000000000000000000000000900460ff16856139fa565b610c519190613ab8565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff8516331480610c835750610c838533611d81565b610ce9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a2063616c6c6572206973206e6f7420617070726f766564006044820152606401610661565b610cf6858585858561232e565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b80516006805460209093015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090931673ffffffffffffffffffffffffffffffffffffffff90921691909117919091179055565b60608151835114610e59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f455243313135353a206163636f756e74732f696473206d69736d6174636800006044820152606401610661565b6000835167ffffffffffffffff811115610e7557610e75613107565b604051908082528060200260200182016040528015610e9e578160200160208202803683370190505b50905060005b8451811015610f1657610ee9858281518110610ec257610ec261382b565b6020026020010151858381518110610edc57610edc61382b565b60200260200101516105e6565b828281518110610efb57610efb61382b565b6020908102919091010152610f0f81613acc565b9050610ea4565b509392505050565b600060028281548110610f3357610f3361382b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610fdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b610fe66000612752565b565b60075473ffffffffffffffffffffffffffffffffffffffff163314611069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f7420612064657369676e61746564207374617368657200000000000000006044820152606401610661565b6000815167ffffffffffffffff81111561108557611085613107565b6040519080825280602002602001820160405280156110ae578160200160208202803683370190505b50905060005b825181101561121b5760008382815181106110d1576110d161382b565b602002602001015190508473ffffffffffffffffffffffffffffffffffffffff16600282815481106111055761110561382b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461118e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f455243313135353a20696e73756666696369656e742062616c616e63650000006044820152606401610661565b6000600282815481106111a3576111a361382b565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018383815181106111ff576111ff61382b565b60209081029190910101525061121481613acc565b90506110b4565b50600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8585604051611293929190613b04565b60405180910390a4505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611370611910565b8261ffff166001546113829190613a37565b11156113ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416d6f756e74206578636565647320617661696c61626c6500000000000000006044820152606401610661565b600b54700100000000000000000000000000000000900461ffff1615806114335750600b54700100000000000000000000000000000000900461ffff1661ffff168261ffff1611155b611499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f416d6f756e742065786365656473206261746368206c696d69740000000000006044820152606401610661565b60006114a483610a63565b905080341015611510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4d7573742070617920666f72206d696e740000000000000000000000000000006044820152606401610661565b60008361ffff1667ffffffffffffffff81111561152f5761152f613107565b604051908082528060200260200182016040528015611558578160200160208202803683370190505b50905060008461ffff1667ffffffffffffffff81111561157a5761157a613107565b6040519080825280602002602001820160405280156115a3578160200160208202803683370190505b50905060005b8561ffff168161ffff161015611692578061ffff166001546115cb9190613a37565b838261ffff16815181106115e1576115e161382b565b6020026020010181815250506001828261ffff16815181106116055761160561382b565b6020908102919091010152600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790558061168a81613b32565b9150506115a9565b508461ffff16600160008282546116a99190613a37565b925050819055506116ce336000868585604051806020016040528060008152506127c7565b8373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8585604051611745929190613b04565b60405180910390a45050505050565b61175f338383612a0e565b5050565b60075473ffffffffffffffffffffffffffffffffffffffff1633146117e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f7420612064657369676e61746564207374617368657200000000000000006044820152606401610661565b6000815167ffffffffffffffff81111561180057611800613107565b604051908082528060200260200182016040528015611829578160200160208202803683370190505b50905060005b82518110156118ed5760015483828151811061184d5761184d61382b565b6020026020010151106118bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610661565b60018282815181106118d0576118d061382b565b6020908102919091010152806118e581613acc565b91505061182f565b5061190b60008484846040518060200160405280600081525061232e565b505050565b600b54600090611934906002906fffffffffffffffffffffffffffffffff16613c94565b6fffffffffffffffffffffffffffffffff16905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146119cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b80516119da90600290613cb5565b6fffffffffffffffffffffffffffffffff1615611a53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f53697a65206e6f74206576656e000000000000000000000000000000000000006044820152606401610661565b600b5481516fffffffffffffffffffffffffffffffff91821691161015611ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f53697a6520736d616c6c6572207468616e2063757272656e74000000000000006044820152606401610661565b600c54604082015114611b45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4465706c6f79657220646973636f756e74206368616e676564000000000000006044820152606401610661565b8051600b8054602084015161ffff16700100000000000000000000000000000000027fffffffffffffffffffffffffffff0000000000000000000000000000000000009091166fffffffffffffffffffffffffffffffff9093169290921791909117905560400151600c55565b60606000825167ffffffffffffffff811115611bd057611bd0613107565b604051908082528060200260200182016040528015611bf9578160200160208202803683370190505b50905060005b8351811015611ca6576002848281518110611c1c57611c1c61382b565b602002602001015181548110611c3457611c3461382b565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110611c7157611c7161382b565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152611c9f81613acc565b9050611bff565b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611d2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b611d5681604051602001611d429190613ce4565b604051602081830303815290604052612b3b565b50565b60606005604051602001611d6d9190613d25565b604051602081830303815290604052905090565b6003546040517fc455279100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260009281169190841690829063c455279190602401602060405180830381865afa158015611df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1d9190613d5e565b73ffffffffffffffffffffffffffffffffffffffff1603611e42576001915050610736565b505073ffffffffffffffffffffffffffffffffffffffff918216600090815260046020908152604080832093909416825291909152205460ff1690565b6001548310611eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610661565b81600114611f54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e6e6f74207472616e7366657220616d6f756e74203e20310000000000006044820152606401610661565b73ffffffffffffffffffffffffffffffffffffffff8516331480611f7d5750611f7d8533611d81565b611fe3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a2063616c6c6572206973206e6f7420617070726f766564006044820152606401610661565b610cf68585858585612bcf565b60005473ffffffffffffffffffffffffffffffffffffffff163314612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b73ffffffffffffffffffffffffffffffffffffffff8116612114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610661565b611d5681612752565b60005473ffffffffffffffffffffffffffffffffffffffff16331461219e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f1935050505015801561190b573d6000803e3d6000fd5b60608160000361222457505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561224e578061223881613acc565b91506122479050600a83613ab8565b9150612228565b60008167ffffffffffffffff81111561226957612269613107565b6040519080825280601f01601f191660200182016040528015612293576020820181803683370190505b5090505b8415610bf8576122a8600183613a4f565b91506122b5600a86613d7b565b6122c0906030613a37565b60f81b8183815181106122d5576122d561382b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061230f600a86613ab8565b9450612297565b60008183106123255781612327565b825b9392505050565b8151835114612399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f455243313135353a206964732f616d6f756e7473206d69736d617463680000006044820152606401610661565b73ffffffffffffffffffffffffffffffffffffffff8416612416576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a207472616e7366657220746f2061646472657373283029006044820152606401610661565b6000835167ffffffffffffffff81111561243257612432613107565b60405190808252806020026020018201604052801561245b578160200160208202803683370190505b50905060005b84518110156126bd57600085828151811061247e5761247e61382b565b60200260200101519050600085838151811061249c5761249c61382b565b602002602001015190506001548210612511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610661565b8060011461257b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e6e6f74207472616e7366657220616d6f756e74203e20310000000000006044820152606401610661565b8873ffffffffffffffffffffffffffffffffffffffff16600283815481106125a5576125a561382b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461262e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f455243313135353a20696e73756666696369656e742062616c616e63650000006044820152606401610661565b87600283815481106126425761264261382b565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600084848151811061269e5761269e61382b565b6020026020010181815250505050806126b690613acc565b9050612461565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8785604051612734929190613b04565b60405180910390a461274a3387878787876127c7565b505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff84163b1561274a576040517fbc197c8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063bc197c819061283e9089908990889088908890600401613d8f565b6020604051808303816000875af1925050508015612897575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261289491810190613dfa565b60015b61295a576128a3613e17565b806308c379a0036128f657506128b7613e33565b806128c257506128f8565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066191906130f4565b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a20746f206e6f7420455243313135355265636569766572006044820152606401610661565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c810000000000000000000000000000000000000000000000000000000014612a05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a204552433131353552656365697665722072656a656374006044820152606401610661565b50505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612aa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f455243313135353a2063616e6e6f7420617070726f76652073656c66000000006044820152606401610661565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526004602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612bbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610661565b805161175f906005906020840190612f2f565b73ffffffffffffffffffffffffffffffffffffffff8416612c4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a207472616e7366657220746f2061646472657373283029006044820152606401610661565b8473ffffffffffffffffffffffffffffffffffffffff1660028481548110612c7657612c7661382b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614612cff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f455243313135353a20696e73756666696369656e742062616c616e63650000006044820152606401610661565b8360028481548110612d1357612d1361382b565b60009182526020918290200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff938416179055604080518681529182018590528683169288169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610cf633868686868673ffffffffffffffffffffffffffffffffffffffff84163b1561274a576040517ff23a6e6100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063f23a6e6190612e1f9089908990889088908890600401613edb565b6020604051808303816000875af1925050508015612e78575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612e7591810190613dfa565b60015b612e84576128a3613e17565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e610000000000000000000000000000000000000000000000000000000014612a05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f455243313135353a204552433131353552656365697665722072656a656374006044820152606401610661565b828054612f3b9061385a565b90600052602060002090601f016020900481019282612f5d5760008555612fa3565b82601f10612f7657805160ff1916838001178555612fa3565b82800160010185558215612fa3579182015b82811115612fa3578251825591602001919060010190612f88565b50612faf929150612fb3565b5090565b5b80821115612faf5760008155600101612fb4565b73ffffffffffffffffffffffffffffffffffffffff81168114611d5657600080fd5b60008060408385031215612ffd57600080fd5b823561300881612fc8565b946020939093013593505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114611d5657600080fd5b60006020828403121561305657600080fd5b813561232781613016565b60006020828403121561307357600080fd5b5035919050565b60005b8381101561309557818101518382015260200161307d565b838111156130a4576000848401525b50505050565b600081518084526130c281602086016020860161307a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061232760208301846130aa565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810181811067ffffffffffffffff8211171561315657613156613107565b60405250565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff821117156131a0576131a0613107565b6040525050565b6000606082840312156131b957600080fd5b6040516131c581613136565b8235815260208301356020820152604083013560408201528091505092915050565b803561ffff811681146131f957600080fd5b919050565b60006020828403121561321057600080fd5b612327826131e7565b6000806040838503121561322c57600080fd5b50508035926020909101359150565b600067ffffffffffffffff82111561325557613255613107565b5060051b60200190565b600082601f83011261327057600080fd5b8135602061327d8261323b565b60405161328a828261315c565b83815260059390931b85018201928281019150868411156132aa57600080fd5b8286015b848110156132c557803583529183019183016132ae565b509695505050505050565b600067ffffffffffffffff8311156132ea576132ea613107565b60405161331f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f870116018261315c565b80915083815284848401111561333457600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261335d57600080fd5b612327838335602085016132d0565b600080600080600060a0868803121561338457600080fd5b853561338f81612fc8565b9450602086013561339f81612fc8565b9350604086013567ffffffffffffffff808211156133bc57600080fd5b6133c889838a0161325f565b945060608801359150808211156133de57600080fd5b6133ea89838a0161325f565b9350608088013591508082111561340057600080fd5b5061340d8882890161334c565b9150509295509295909350565b60006040828403121561342c57600080fd5b6040516040810181811067ffffffffffffffff8211171561344f5761344f613107565b604052823561345d81612fc8565b8152602083013560ff8116811461347357600080fd5b60208201529392505050565b6000806040838503121561349257600080fd5b823567ffffffffffffffff808211156134aa57600080fd5b818501915085601f8301126134be57600080fd5b813560206134cb8261323b565b6040516134d8828261315c565b83815260059390931b85018201928281019150898411156134f857600080fd5b948201945b8386101561351f57853561351081612fc8565b825294820194908201906134fd565b9650508601359250508082111561353557600080fd5b506135428582860161325f565b9150509250929050565b600081518084526020808501945080840160005b8381101561357c57815187529582019590820190600101613560565b509495945050505050565b602081526000612327602083018461354c565b600080604083850312156135ad57600080fd5b82356135b881612fc8565b9150602083013567ffffffffffffffff8111156135d457600080fd5b6135428582860161325f565b6000602082840312156135f257600080fd5b813561232781612fc8565b6000806040838503121561361057600080fd5b613619836131e7565b9150602083013561362981612fc8565b809150509250929050565b6000806040838503121561364757600080fd5b823561365281612fc8565b91506020830135801515811461362957600080fd5b60006060828403121561367957600080fd5b60405161368581613136565b82356fffffffffffffffffffffffffffffffff811681146136a557600080fd5b81526136b3602084016131e7565b6020820152604083013560408201528091505092915050565b6000602082840312156136de57600080fd5b813567ffffffffffffffff8111156136f557600080fd5b610bf88482850161325f565b6020808252825182820181905260009190848201906040850190845b8181101561374f57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161371d565b50909695505050505050565b60006020828403121561376d57600080fd5b813567ffffffffffffffff81111561378457600080fd5b8201601f8101841361379557600080fd5b610bf8848235602084016132d0565b600080604083850312156137b757600080fd5b823561361981612fc8565b600080600080600060a086880312156137da57600080fd5b85356137e581612fc8565b945060208601356137f581612fc8565b93506040860135925060608601359150608086013567ffffffffffffffff81111561381f57600080fd5b61340d8882890161334c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c9082168061386e57607f821691505b6020821081036138a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8054600090600181811c90808316806138c757607f831692505b60208084108203613901577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b818015613915576001811461394457613971565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650613971565b60008881526020902060005b868110156139695781548b820152908501908301613950565b505084890196505b50505050505092915050565b600061398982856138ad565b7f746f6b656e2f0000000000000000000000000000000000000000000000000000815283516139bf81600684016020880161307a565b01600601949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a3257613a326139cb565b500290565b60008219821115613a4a57613a4a6139cb565b500190565b600082821015613a6157613a616139cb565b500390565b600061ffff83811690831681811015613a8157613a816139cb565b039392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613ac757613ac7613a89565b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613afd57613afd6139cb565b5060010190565b604081526000613b17604083018561354c565b8281036020840152613b29818561354c565b95945050505050565b600061ffff808316818103613b4957613b496139cb565b6001019392505050565b600181815b80851115613b9c57816fffffffffffffffffffffffffffffffff04821115613b8257613b826139cb565b80851615613b8f57918102915b93841c9390800290613b58565b509250929050565b600082613bb357506001610736565b81613bc057506000610736565b8160018114613bd65760028114613be057613c1d565b6001915050610736565b60ff841115613bf157613bf16139cb565b6001841b91506fffffffffffffffffffffffffffffffff821115613c1757613c176139cb565b50610736565b5060208310610133831016604e8410600b8410161715613c60575081810a6fffffffffffffffffffffffffffffffff811115613c5b57613c5b6139cb565b610736565b613c6a8383613b53565b806fffffffffffffffffffffffffffffffff04821115613c8c57613c8c6139cb565b029392505050565b600061232760ff84166fffffffffffffffffffffffffffffffff8416613ba4565b60006fffffffffffffffffffffffffffffffff80841680613cd857613cd8613a89565b92169190910692915050565b60008251613cf681846020870161307a565b7f74696c652f000000000000000000000000000000000000000000000000000000920191825250600501919050565b6000613d3182846138ad565b7f636f6e747261637400000000000000000000000000000000000000000000000081526008019392505050565b600060208284031215613d7057600080fd5b815161232781612fc8565b600082613d8a57613d8a613a89565b500690565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a06040830152613dc860a083018661354c565b8281036060840152613dda818661354c565b90508281036080840152613dee81856130aa565b98975050505050505050565b600060208284031215613e0c57600080fd5b815161232781613016565b600060033d1115613e305760046000803e5060005160e01c5b90565b600060443d1015613e415790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715613e8f57505050505090565b8285019150815181811115613ea75750505050505090565b843d8701016020828501011115613ec15750505050505090565b613ed06020828601018761315c565b509095945050505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015283606083015260a06080830152613f2060a08301846130aa565b97965050505050505056fea264697066735822122086930e36fb7f74502a42ee9bb4a172547b11beb1fc6381909d11e21faa782a1064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "contractURI()": {
        "details": "OpenSea spec metadata for the contract - always \"<baseUrl>/contract\"."
      },
      "getMintCost(uint16)": {
        "details": "Gets the cost of minting tiles.",
        "params": {
          "amount": "the amount of tiles to mint."
        },
        "returns": {
          "_0": "the cost of minting the given amount of tiles. Cost may be 0 for deployer."
        }
      },
      "getOwningAddress(uint256)": {
        "details": "Gets the owner of a given token."
      },
      "getOwningAddressBatch(uint256[])": {
        "details": "Gets the owner(s) of a given batch of tokens."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}. This also whitelists the ProxyRegistry used by OpenSea."
      },
      "maxMintSize()": {
        "details": "Gets the current limit for tiles in a single batch.",
        "returns": {
          "_0": "the batch limit. If 0, there is no batch limit."
        }
      },
      "maxTiles()": {
        "details": "Gets the current limit to tiles."
      },
      "mintTo(uint16,address)": {
        "details": "Mints tiles in batch.",
        "params": {
          "amount": "the amount of tiles to mint.",
          "to": "the address to mint tiles to (does not have to be msg.sender)."
        }
      },
      "mintedTiles()": {
        "details": "Gets the current number of minted tiles (convenience function identical to mintedTokens)"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "See {IERC2981-royaltyInfo}.",
        "returns": {
          "receiver": "will always be the address of the deployer of the contract.",
          "royaltyAmount": "will always be 7% of value."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns a unique URI for each token, using a \"token/<id>\" format, for a wider compatibility compared to \"{id}\" replacement."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintTo(uint16,address)": {
        "notice": "Mint `amount` tiles to address `to`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Tile.sol:Tile",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2561,
        "contract": "contracts/Tile.sol:Tile",
        "label": "mintedTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2564,
        "contract": "contracts/Tile.sol:Tile",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2566,
        "contract": "contracts/Tile.sol:Tile",
        "label": "_proxyRegistryAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2572,
        "contract": "contracts/Tile.sol:Tile",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2574,
        "contract": "contracts/Tile.sol:Tile",
        "label": "_baseUrl",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2577,
        "contract": "contracts/Tile.sol:Tile",
        "label": "_royaltyConfig",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(RoyaltyConfig)2558_storage"
      },
      {
        "astId": 1913,
        "contract": "contracts/Tile.sol:Tile",
        "label": "_stasher",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1916,
        "contract": "contracts/Tile.sol:Tile",
        "label": "_fees",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Fees)1900_storage"
      },
      {
        "astId": 1919,
        "contract": "contracts/Tile.sol:Tile",
        "label": "_limits",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Limits)1907_storage"
      },
      {
        "astId": 1921,
        "contract": "contracts/Tile.sol:Tile",
        "label": "_deployer",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Fees)1900_storage": {
        "encoding": "inplace",
        "label": "struct Tile.Fees",
        "members": [
          {
            "astId": 1895,
            "contract": "contracts/Tile.sol:Tile",
            "label": "mintFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1897,
            "contract": "contracts/Tile.sol:Tile",
            "label": "bulkDiscount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1899,
            "contract": "contracts/Tile.sol:Tile",
            "label": "mintFeeMin",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Limits)1907_storage": {
        "encoding": "inplace",
        "label": "struct Tile.Limits",
        "members": [
          {
            "astId": 1902,
            "contract": "contracts/Tile.sol:Tile",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1904,
            "contract": "contracts/Tile.sol:Tile",
            "label": "batchSize",
            "offset": 16,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1906,
            "contract": "contracts/Tile.sol:Tile",
            "label": "deployerDiscountedTiles",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltyConfig)2558_storage": {
        "encoding": "inplace",
        "label": "struct ERC1155NFT.RoyaltyConfig",
        "members": [
          {
            "astId": 2555,
            "contract": "contracts/Tile.sol:Tile",
            "label": "target",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2557,
            "contract": "contracts/Tile.sol:Tile",
            "label": "points",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}