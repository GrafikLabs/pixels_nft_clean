{
  "address": "0x156AE68082a0C6851599e78E4fBB2D4AdC362F53",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialMinFee",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "initialSize",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "initialDiscount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "apiUrl",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "owed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        }
      ],
      "name": "MintedPixels",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        }
      ],
      "name": "getMintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPixels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pixels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newMinFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newDiscount",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newSize",
          "type": "uint128"
        }
      ],
      "name": "setLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x07248e69208c04d6a19c45073e280cf4adc5345fafc911b96c1bb97d7dbf65f7",
  "receipt": {
    "to": null,
    "from": "0x00a82813b2992eE756Ac891264e5c380121dDCF2",
    "contractAddress": "0x156AE68082a0C6851599e78E4fBB2D4AdC362F53",
    "transactionIndex": 23,
    "gasUsed": "3809257",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000002000000000000000000000000000000000000000000000000000000000000000000400000000000000000000004000000000000001000000000000000000000000000000000000020000080000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000080",
    "blockHash": "0x6efef8a839214aedb6f368bf78b8b2c54de58bb0368245a1276ddab9ee499af3",
    "transactionHash": "0x07248e69208c04d6a19c45073e280cf4adc5345fafc911b96c1bb97d7dbf65f7",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 10493319,
        "transactionHash": "0x07248e69208c04d6a19c45073e280cf4adc5345fafc911b96c1bb97d7dbf65f7",
        "address": "0x156AE68082a0C6851599e78E4fBB2D4AdC362F53",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000000a82813b2992ee756ac891264e5c380121ddcf2"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x6efef8a839214aedb6f368bf78b8b2c54de58bb0368245a1276ddab9ee499af3"
      }
    ],
    "blockNumber": 10493319,
    "cumulativeGasUsed": "12738072",
    "status": 1,
    "byzantium": true
  },
  "args": [
    999999,
    9999,
    256,
    999,
    "https://pixels.watch/api/v1/pixels/"
  ],
  "numDeployments": 1,
  "solcInputHash": "8020749105e71d85603b1fd384052d59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMinFee\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"initialSize\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialDiscount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"apiUrl\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"name\":\"MintedPixels\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"getMintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPixels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pixels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDiscount\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newSize\",\"type\":\"uint128\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimplePixel.sol\":\"SimplePixel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/SimplePixel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// 2282089 2348818\\ncontract SimplePixel is ERC1155, Ownable {\\n    // Publicly visible\\n    uint256 public maxPixels;\\n    uint256 public pixels = 0;\\n    string public baseUrl;\\n\\n    // Events\\n    event MintedPixels(uint256[] tokenIds, uint256 owed, uint256 paid);\\n\\n    // Internal variables - use getMintCost instead.\\n    uint256 mintFee;\\n    uint256 minMintFee;\\n    uint256 bulkDiscount;\\n\\n    constructor(uint256 initialFee, uint256 initialMinFee, uint128 initialSize, uint256 initialDiscount, string memory apiUrl)\\n    ERC1155(\\\"https://game.example/api/item/{id}.json\\\") {\\n        require(initialMinFee < initialFee, \\\"Minimum fee cannot be greater than starting fee\\\");\\n        require(initialSize % 2 == 0, \\\"Can only set size to even numbers\\\");\\n        mintFee = initialFee * 10 ** 9;\\n        minMintFee = initialMinFee * 10 ** 9;\\n        bulkDiscount = initialDiscount * 10 ** 9;\\n        maxPixels = initialSize * initialSize;\\n        baseUrl = apiUrl;\\n    }\\n\\n    function getMintCost(uint16 amount) public view returns (uint256) {\\n        // Total owed:\\n        // sum_(x=0)^amount (mintFee - bulkDiscount * x)\\n        // i.e. each subsequent pixel is bulkDiscount cheaper than the previous\\n        // one, starting at mintFee for the first one, down to minMintFee.\\n        // same as below:\\n        require (pixels + amount < maxPixels, \\\"Purchase would mint more pixels than available\\\");\\n        uint256 base = Math.min(amount, (mintFee-minMintFee)/bulkDiscount);\\n        return base * (mintFee - (base - 1) * bulkDiscount / 2) + (amount - base) * minMintFee;\\n    }\\n\\n    // 1 for 72939 / 80188\\n    // 10 for 293138\\n    // 100 for 2495402\\n    function mint(uint16 amount) public payable {\\n        require (pixels + amount < maxPixels, \\\"Cannot mint more pixels than available\\\");\\n        uint256 transactionTotal = getMintCost(amount);\\n        require(msg.value >= transactionTotal, \\\"Insufficient value attached for minting request\\\");\\n        uint256[] memory tokenIds = new uint256[](amount);\\n        uint256[] memory ones = new uint256[](amount);\\n        for (uint16 i = 0; i < amount; i++) {\\n            tokenIds[i] = pixels + i;\\n            ones[i] = 1;\\n        }\\n        _mintBatch(msg.sender, tokenIds, ones, \\\"\\\");\\n        pixels += amount;\\n        emit MintedPixels(tokenIds, transactionTotal, msg.value);\\n    }\\n\\n    // Metadata\\n    function uri(uint256 id) public view override returns (string memory) {\\n        require(id < pixels, \\\"Token does not exist\\\");\\n        return string(abi.encodePacked(baseUrl, \\\"pixel/\\\", Strings.toString(id)));\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return string(abi.encodePacked(baseUrl, \\\"contract\\\"));\\n    }\\n\\n    // Owner functions.\\n    function setFee(uint256 newFee, uint256 newMinFee, uint256 newDiscount) public onlyOwner {\\n        require(newMinFee < newFee, \\\"Minimum fee cannot be greater than starting fee\\\");\\n        mintFee = newFee * 10 ** 9;\\n        minMintFee = newMinFee * 10 ** 9;\\n        bulkDiscount = newDiscount * 10 ** 9;\\n    }\\n\\n    function setLimit(uint128 newSize) public onlyOwner {\\n        require(newSize % 2 == 0, \\\"Can only set size to even numbers\\\");\\n        uint256 newLimit = newSize * newSize;\\n        require(newLimit >= maxPixels, \\\"Cannot reduce limit of pixels.\\\");\\n        maxPixels = newLimit;\\n    }\\n}\",\"keccak256\":\"0xa531bbc4edf18ec8b2a2290dd55680f7349a60997d94739a320474158a342887\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006005553480156200001657600080fd5b506040516200486e3803806200486e83398181016040528101906200003c91906200040b565b60405180606001604052806027815260200162004847602791396200006781620001c560201b60201c565b50620000886200007c620001e160201b60201c565b620001e960201b60201c565b848410620000cd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c49062000522565b60405180910390fd5b6000600284620000de91906200072e565b6fffffffffffffffffffffffffffffffff161462000133576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012a9062000500565b60405180910390fd5b633b9aca008562000145919062000605565b600781905550633b9aca00846200015d919062000605565b600881905550633b9aca008262000175919062000605565b6009819055508283620001899190620005b4565b6fffffffffffffffffffffffffffffffff166004819055508060069080519060200190620001b9929190620002af565b50505050505062000919565b8060029080519060200190620001dd929190620002af565b5050565b600033905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002bd90620006c2565b90600052602060002090601f016020900481019282620002e157600085556200032d565b82601f10620002fc57805160ff19168380011785556200032d565b828001600101855582156200032d579182015b828111156200032c5782518255916020019190600101906200030f565b5b5090506200033c919062000340565b5090565b5b808211156200035b57600081600090555060010162000341565b5090565b60006200037662000370846200056d565b62000544565b90508281526020810184848401111562000395576200039462000827565b5b620003a28482856200068c565b509392505050565b600082601f830112620003c257620003c162000822565b5b8151620003d48482602086016200035f565b91505092915050565b600081519050620003ee81620008e5565b92915050565b6000815190506200040581620008ff565b92915050565b600080600080600060a086880312156200042a576200042962000831565b5b60006200043a88828901620003f4565b95505060206200044d88828901620003f4565b94505060406200046088828901620003dd565b93505060606200047388828901620003f4565b925050608086015167ffffffffffffffff8111156200049757620004966200082c565b5b620004a588828901620003aa565b9150509295509295909350565b6000620004c1602183620005a3565b9150620004ce8262000847565b604082019050919050565b6000620004e8602f83620005a3565b9150620004f58262000896565b604082019050919050565b600060208201905081810360008301526200051b81620004b2565b9050919050565b600060208201905081810360008301526200053d81620004d9565b9050919050565b60006200055062000563565b90506200055e8282620006f8565b919050565b6000604051905090565b600067ffffffffffffffff8211156200058b576200058a620007f3565b5b620005968262000836565b9050602081019050919050565b600082825260208201905092915050565b6000620005c18262000666565b9150620005ce8362000666565b9250816fffffffffffffffffffffffffffffffff0483118215151615620005fa57620005f962000766565b5b828202905092915050565b6000620006128262000682565b91506200061f8362000682565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200065b576200065a62000766565b5b828202905092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620006ac5780820151818401526020810190506200068f565b83811115620006bc576000848401525b50505050565b60006002820490506001821680620006db57607f821691505b60208210811415620006f257620006f1620007c4565b5b50919050565b620007038262000836565b810181811067ffffffffffffffff82111715620007255762000724620007f3565b5b80604052505050565b60006200073b8262000666565b9150620007488362000666565b9250826200075b576200075a62000795565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f43616e206f6e6c79207365742073697a6520746f206576656e206e756d62657260008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e696d756d206665652063616e6e6f74206265206772656174657220746860008201527f616e207374617274696e67206665650000000000000000000000000000000000602082015250565b620008f08162000666565b8114620008fc57600080fd5b50565b6200090a8162000682565b81146200091657600080fd5b50565b613f1e80620009296000396000f3fe6080604052600436106101135760003560e01c8063662ad59b116100a0578063e8a3d48511610064578063e8a3d485146103a1578063e985e9c5146103cc578063f242432a14610409578063f2fde38b14610432578063f3e4160c1461045b57610113565b8063662ad59b146102e2578063715018a61461030d5780637f733979146103245780638da5cb5b1461034d578063a22cb4651461037857610113565b806323cf0a22116100e757806323cf0a221461020c5780632eb2c2d6146102285780634e1273f4146102515780635b65b9ab1461028e5780635bcabf04146102b757610113565b8062fdd58e1461011857806301ffc9a7146101555780630e89341c14610192578063204e6dfa146101cf575b600080fd5b34801561012457600080fd5b5061013f600480360381019061013a9190612639565b610486565b60405161014c919061317d565b60405180910390f35b34801561016157600080fd5b5061017c600480360381019061017791906126f1565b61054f565b6040516101899190612ec0565b60405180910390f35b34801561019e57600080fd5b506101b960048036038101906101b491906127a5565b610631565b6040516101c69190612edb565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f19190612778565b6106a9565b604051610203919061317d565b60405180910390f35b61022660048036038101906102219190612778565b61079b565b005b34801561023457600080fd5b5061024f600480360381019061024a9190612493565b6109dc565b005b34801561025d57600080fd5b5061027860048036038101906102739190612679565b610a7d565b6040516102859190612e29565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b091906127d2565b610b96565b005b3480156102c357600080fd5b506102cc610c9b565b6040516102d99190612edb565b60405180910390f35b3480156102ee57600080fd5b506102f7610d29565b604051610304919061317d565b60405180910390f35b34801561031957600080fd5b50610322610d2f565b005b34801561033057600080fd5b5061034b6004803603810190610346919061274b565b610db7565b005b34801561035957600080fd5b50610362610f06565b60405161036f9190612d4c565b60405180910390f35b34801561038457600080fd5b5061039f600480360381019061039a91906125f9565b610f30565b005b3480156103ad57600080fd5b506103b6610f46565b6040516103c39190612edb565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee9190612453565b610f6e565b6040516104009190612ec0565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b9190612562565b611002565b005b34801561043e57600080fd5b5061045960048036038101906104549190612426565b6110a3565b005b34801561046757600080fd5b5061047061119b565b60405161047d919061317d565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee90612f3d565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061061a57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061062a5750610629826111a1565b5b9050919050565b60606005548210610677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066e90612fbd565b60405180910390fd5b60066106828361120b565b604051602001610693929190612cfb565b6040516020818303038152906040529050919050565b60006004548261ffff166005546106c09190613300565b10610700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f7906130dd565b60405180910390fd5b600061072c8361ffff1660095460085460075461071d919061342b565b6107279190613356565b61136c565b9050600854818461ffff16610741919061342b565b61074b91906133d1565b600260095460018461075d919061342b565b61076791906133d1565b6107719190613356565b60075461077e919061342b565b8261078991906133d1565b6107939190613300565b915050919050565b6004548161ffff166005546107b09190613300565b106107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e79061309d565b60405180910390fd5b60006107fb826106a9565b905080341015610840576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083790612f9d565b60405180910390fd5b60008261ffff1667ffffffffffffffff8111156108605761085f613734565b5b60405190808252806020026020018201604052801561088e5781602001602082028036833780820191505090505b50905060008361ffff1667ffffffffffffffff8111156108b1576108b0613734565b5b6040519080825280602002602001820160405280156108df5781602001602082028036833780820191505090505b50905060005b8461ffff168161ffff161015610962578061ffff166005546109079190613300565b838261ffff168151811061091e5761091d613705565b5b6020026020010181815250506001828261ffff168151811061094357610942613705565b5b602002602001018181525050808061095a906135a2565b9150506108e5565b5061097e33838360405180602001604052806000815250611385565b8361ffff16600560008282546109949190613300565b925050819055507fd6b57320ab15ddd95b8d4d4b698b80337cd15aec82315f019d6fefecebc497db8284346040516109ce93929190612e82565b60405180910390a150505050565b6109e46115a3565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610a2a5750610a2985610a246115a3565b610f6e565b5b610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a609061301d565b60405180910390fd5b610a7685858585856115ab565b5050505050565b60608151835114610ac3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aba9061311d565b60405180910390fd5b6000835167ffffffffffffffff811115610ae057610adf613734565b5b604051908082528060200260200182016040528015610b0e5781602001602082028036833780820191505090505b50905060005b8451811015610b8b57610b5b858281518110610b3357610b32613705565b5b6020026020010151858381518110610b4e57610b4d613705565b5b6020026020010151610486565b828281518110610b6e57610b6d613705565b5b60200260200101818152505080610b84906135cd565b9050610b14565b508091505092915050565b610b9e6115a3565b73ffffffffffffffffffffffffffffffffffffffff16610bbc610f06565b73ffffffffffffffffffffffffffffffffffffffff1614610c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c099061307d565b60405180910390fd5b828210610c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4b906130bd565b60405180910390fd5b633b9aca0083610c6491906133d1565b600781905550633b9aca0082610c7a91906133d1565b600881905550633b9aca0081610c9091906133d1565b600981905550505050565b60068054610ca89061353f565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd49061353f565b8015610d215780601f10610cf657610100808354040283529160200191610d21565b820191906000526020600020905b815481529060010190602001808311610d0457829003601f168201915b505050505081565b60055481565b610d376115a3565b73ffffffffffffffffffffffffffffffffffffffff16610d55610f06565b73ffffffffffffffffffffffffffffffffffffffff1614610dab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da29061307d565b60405180910390fd5b610db560006118bf565b565b610dbf6115a3565b73ffffffffffffffffffffffffffffffffffffffff16610ddd610f06565b73ffffffffffffffffffffffffffffffffffffffff1614610e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2a9061307d565b60405180910390fd5b6000600282610e429190613616565b6fffffffffffffffffffffffffffffffff1614610e94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8b90612fdd565b60405180910390fd5b60008182610ea29190613387565b6fffffffffffffffffffffffffffffffff169050600454811015610efb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef29061305d565b60405180910390fd5b806004819055505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f42610f3b6115a3565b8383611985565b5050565b60606006604051602001610f5a9190612d2a565b604051602081830303815290604052905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61100a6115a3565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611050575061104f8561104a6115a3565b610f6e565b5b61108f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108690612f7d565b60405180910390fd5b61109c8585858585611af2565b5050505050565b6110ab6115a3565b73ffffffffffffffffffffffffffffffffffffffff166110c9610f06565b73ffffffffffffffffffffffffffffffffffffffff161461111f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111169061307d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561118f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118690612f5d565b60405180910390fd5b611198816118bf565b50565b60045481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606000821415611253576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611367565b600082905060005b6000821461128557808061126e906135cd565b915050600a8261127e9190613356565b915061125b565b60008167ffffffffffffffff8111156112a1576112a0613734565b5b6040519080825280601f01601f1916602001820160405280156112d35781602001600182028036833780820191505090505b5090505b60008514611360576001826112ec919061342b565b9150600a856112fb9190613647565b60306113079190613300565b60f81b81838151811061131d5761131c613705565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856113599190613356565b94506112d7565b8093505050505b919050565b600081831061137b578161137d565b825b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156113f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ec9061315d565b60405180910390fd5b8151835114611439576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114309061313d565b60405180910390fd5b60006114436115a3565b905061145481600087878787611d74565b60005b845181101561150d5783818151811061147357611472613705565b5b602002602001015160008087848151811061149157611490613705565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114f39190613300565b925050819055508080611505906135cd565b915050611457565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611585929190612e4b565b60405180910390a461159c81600087878787611d7c565b5050505050565b600033905090565b81518351146115ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e69061313d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561165f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165690612ffd565b60405180910390fd5b60006116696115a3565b9050611679818787878787611d74565b60005b845181101561182a57600085828151811061169a57611699613705565b5b6020026020010151905060008583815181106116b9576116b8613705565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561175a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117519061303d565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461180f9190613300565b9250508190555050505080611823906135cd565b905061167c565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118a1929190612e4b565b60405180910390a46118b7818787878787611d7c565b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119eb906130fd565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ae59190612ec0565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5990612ffd565b60405180910390fd5b6000611b6c6115a3565b9050611b8c818787611b7d88611f63565b611b8688611f63565b87611d74565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015611c23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1a9061303d565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611cd89190613300565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051611d55929190613198565b60405180910390a4611d6b828888888888611fdd565b50505050505050565b505050505050565b611d9b8473ffffffffffffffffffffffffffffffffffffffff166121c4565b15611f5b578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611de1959493929190612d67565b602060405180830381600087803b158015611dfb57600080fd5b505af1925050508015611e2c57506040513d601f19601f82011682018060405250810190611e29919061271e565b60015b611ed257611e38613763565b806308c379a01415611e955750611e4d613dc8565b80611e585750611e97565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8c9190612edb565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec990612efd565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611f59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5090612f1d565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115611f8257611f81613734565b5b604051908082528060200260200182016040528015611fb05781602001602082028036833780820191505090505b5090508281600081518110611fc857611fc7613705565b5b60200260200101818152505080915050919050565b611ffc8473ffffffffffffffffffffffffffffffffffffffff166121c4565b156121bc578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612042959493929190612dcf565b602060405180830381600087803b15801561205c57600080fd5b505af192505050801561208d57506040513d601f19601f8201168201806040525081019061208a919061271e565b60015b61213357612099613763565b806308c379a014156120f657506120ae613dc8565b806120b957506120f8565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ed9190612edb565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212a90612efd565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146121ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b190612f1d565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006121fa6121f5846131e6565b6131c1565b9050808382526020820190508285602086028201111561221d5761221c61378a565b5b60005b8581101561224d57816122338882612309565b845260208401935060208301925050600181019050612220565b5050509392505050565b600061226a61226584613212565b6131c1565b9050808382526020820190508285602086028201111561228d5761228c61378a565b5b60005b858110156122bd57816122a38882612411565b845260208401935060208301925050600181019050612290565b5050509392505050565b60006122da6122d58461323e565b6131c1565b9050828152602081018484840111156122f6576122f561378f565b5b6123018482856134fd565b509392505050565b60008135905061231881613e5e565b92915050565b600082601f83011261233357612332613785565b5b81356123438482602086016121e7565b91505092915050565b600082601f83011261236157612360613785565b5b8135612371848260208601612257565b91505092915050565b60008135905061238981613e75565b92915050565b60008135905061239e81613e8c565b92915050565b6000815190506123b381613e8c565b92915050565b600082601f8301126123ce576123cd613785565b5b81356123de8482602086016122c7565b91505092915050565b6000813590506123f681613ea3565b92915050565b60008135905061240b81613eba565b92915050565b60008135905061242081613ed1565b92915050565b60006020828403121561243c5761243b613799565b5b600061244a84828501612309565b91505092915050565b6000806040838503121561246a57612469613799565b5b600061247885828601612309565b925050602061248985828601612309565b9150509250929050565b600080600080600060a086880312156124af576124ae613799565b5b60006124bd88828901612309565b95505060206124ce88828901612309565b945050604086013567ffffffffffffffff8111156124ef576124ee613794565b5b6124fb8882890161234c565b935050606086013567ffffffffffffffff81111561251c5761251b613794565b5b6125288882890161234c565b925050608086013567ffffffffffffffff81111561254957612548613794565b5b612555888289016123b9565b9150509295509295909350565b600080600080600060a0868803121561257e5761257d613799565b5b600061258c88828901612309565b955050602061259d88828901612309565b94505060406125ae88828901612411565b93505060606125bf88828901612411565b925050608086013567ffffffffffffffff8111156125e0576125df613794565b5b6125ec888289016123b9565b9150509295509295909350565b600080604083850312156126105761260f613799565b5b600061261e85828601612309565b925050602061262f8582860161237a565b9150509250929050565b600080604083850312156126505761264f613799565b5b600061265e85828601612309565b925050602061266f85828601612411565b9150509250929050565b600080604083850312156126905761268f613799565b5b600083013567ffffffffffffffff8111156126ae576126ad613794565b5b6126ba8582860161231e565b925050602083013567ffffffffffffffff8111156126db576126da613794565b5b6126e78582860161234c565b9150509250929050565b60006020828403121561270757612706613799565b5b60006127158482850161238f565b91505092915050565b60006020828403121561273457612733613799565b5b6000612742848285016123a4565b91505092915050565b60006020828403121561276157612760613799565b5b600061276f848285016123e7565b91505092915050565b60006020828403121561278e5761278d613799565b5b600061279c848285016123fc565b91505092915050565b6000602082840312156127bb576127ba613799565b5b60006127c984828501612411565b91505092915050565b6000806000606084860312156127eb576127ea613799565b5b60006127f986828701612411565b935050602061280a86828701612411565b925050604061281b86828701612411565b9150509250925092565b60006128318383612cdd565b60208301905092915050565b6128468161345f565b82525050565b600061285782613294565b61286181856132c2565b935061286c8361326f565b8060005b8381101561289d5781516128848882612825565b975061288f836132b5565b925050600181019050612870565b5085935050505092915050565b6128b381613471565b82525050565b60006128c48261329f565b6128ce81856132d3565b93506128de81856020860161350c565b6128e78161379e565b840191505092915050565b60006128fd826132aa565b61290781856132e4565b935061291781856020860161350c565b6129208161379e565b840191505092915050565b6000612936826132aa565b61294081856132f5565b935061295081856020860161350c565b80840191505092915050565b600081546129698161353f565b61297381866132f5565b9450600182166000811461298e576001811461299f576129d2565b60ff198316865281860193506129d2565b6129a88561327f565b60005b838110156129ca578154818901526001820191506020810190506129ab565b838801955050505b50505092915050565b60006129e86034836132e4565b91506129f3826137bc565b604082019050919050565b6000612a0b6028836132e4565b9150612a168261380b565b604082019050919050565b6000612a2e602b836132e4565b9150612a398261385a565b604082019050919050565b6000612a516026836132e4565b9150612a5c826138a9565b604082019050919050565b6000612a746006836132f5565b9150612a7f826138f8565b600682019050919050565b6000612a976029836132e4565b9150612aa282613921565b604082019050919050565b6000612aba602f836132e4565b9150612ac582613970565b604082019050919050565b6000612add6014836132e4565b9150612ae8826139bf565b602082019050919050565b6000612b006021836132e4565b9150612b0b826139e8565b604082019050919050565b6000612b236025836132e4565b9150612b2e82613a37565b604082019050919050565b6000612b466032836132e4565b9150612b5182613a86565b604082019050919050565b6000612b696008836132f5565b9150612b7482613ad5565b600882019050919050565b6000612b8c602a836132e4565b9150612b9782613afe565b604082019050919050565b6000612baf601e836132e4565b9150612bba82613b4d565b602082019050919050565b6000612bd26020836132e4565b9150612bdd82613b76565b602082019050919050565b6000612bf56026836132e4565b9150612c0082613b9f565b604082019050919050565b6000612c18602f836132e4565b9150612c2382613bee565b604082019050919050565b6000612c3b602e836132e4565b9150612c4682613c3d565b604082019050919050565b6000612c5e6029836132e4565b9150612c6982613c8c565b604082019050919050565b6000612c816029836132e4565b9150612c8c82613cdb565b604082019050919050565b6000612ca46028836132e4565b9150612caf82613d2a565b604082019050919050565b6000612cc76021836132e4565b9150612cd282613d79565b604082019050919050565b612ce6816134f3565b82525050565b612cf5816134f3565b82525050565b6000612d07828561295c565b9150612d1282612a67565b9150612d1e828461292b565b91508190509392505050565b6000612d36828461295c565b9150612d4182612b5c565b915081905092915050565b6000602082019050612d61600083018461283d565b92915050565b600060a082019050612d7c600083018861283d565b612d89602083018761283d565b8181036040830152612d9b818661284c565b90508181036060830152612daf818561284c565b90508181036080830152612dc381846128b9565b90509695505050505050565b600060a082019050612de4600083018861283d565b612df1602083018761283d565b612dfe6040830186612cec565b612e0b6060830185612cec565b8181036080830152612e1d81846128b9565b90509695505050505050565b60006020820190508181036000830152612e43818461284c565b905092915050565b60006040820190508181036000830152612e65818561284c565b90508181036020830152612e79818461284c565b90509392505050565b60006060820190508181036000830152612e9c818661284c565b9050612eab6020830185612cec565b612eb86040830184612cec565b949350505050565b6000602082019050612ed560008301846128aa565b92915050565b60006020820190508181036000830152612ef581846128f2565b905092915050565b60006020820190508181036000830152612f16816129db565b9050919050565b60006020820190508181036000830152612f36816129fe565b9050919050565b60006020820190508181036000830152612f5681612a21565b9050919050565b60006020820190508181036000830152612f7681612a44565b9050919050565b60006020820190508181036000830152612f9681612a8a565b9050919050565b60006020820190508181036000830152612fb681612aad565b9050919050565b60006020820190508181036000830152612fd681612ad0565b9050919050565b60006020820190508181036000830152612ff681612af3565b9050919050565b6000602082019050818103600083015261301681612b16565b9050919050565b6000602082019050818103600083015261303681612b39565b9050919050565b6000602082019050818103600083015261305681612b7f565b9050919050565b6000602082019050818103600083015261307681612ba2565b9050919050565b6000602082019050818103600083015261309681612bc5565b9050919050565b600060208201905081810360008301526130b681612be8565b9050919050565b600060208201905081810360008301526130d681612c0b565b9050919050565b600060208201905081810360008301526130f681612c2e565b9050919050565b6000602082019050818103600083015261311681612c51565b9050919050565b6000602082019050818103600083015261313681612c74565b9050919050565b6000602082019050818103600083015261315681612c97565b9050919050565b6000602082019050818103600083015261317681612cba565b9050919050565b60006020820190506131926000830184612cec565b92915050565b60006040820190506131ad6000830185612cec565b6131ba6020830184612cec565b9392505050565b60006131cb6131dc565b90506131d78282613571565b919050565b6000604051905090565b600067ffffffffffffffff82111561320157613200613734565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561322d5761322c613734565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561325957613258613734565b5b6132628261379e565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061330b826134f3565b9150613316836134f3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561334b5761334a613678565b5b828201905092915050565b6000613361826134f3565b915061336c836134f3565b92508261337c5761337b6136a7565b5b828204905092915050565b6000613392826134a9565b915061339d836134a9565b9250816fffffffffffffffffffffffffffffffff04831182151516156133c6576133c5613678565b5b828202905092915050565b60006133dc826134f3565b91506133e7836134f3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156134205761341f613678565b5b828202905092915050565b6000613436826134f3565b9150613441836134f3565b92508282101561345457613453613678565b5b828203905092915050565b600061346a826134d3565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561352a57808201518184015260208101905061350f565b83811115613539576000848401525b50505050565b6000600282049050600182168061355757607f821691505b6020821081141561356b5761356a6136d6565b5b50919050565b61357a8261379e565b810181811067ffffffffffffffff8211171561359957613598613734565b5b80604052505050565b60006135ad826134c5565b915061ffff8214156135c2576135c1613678565b5b600182019050919050565b60006135d8826134f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561360b5761360a613678565b5b600182019050919050565b6000613621826134a9565b915061362c836134a9565b92508261363c5761363b6136a7565b5b828206905092915050565b6000613652826134f3565b915061365d836134f3565b92508261366d5761366c6136a7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156137825760046000803e61377f6000516137af565b90505b90565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f706978656c2f0000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e742076616c756520617474616368656420666f722060008201527f6d696e74696e6720726571756573740000000000000000000000000000000000602082015250565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b7f43616e206f6e6c79207365742073697a6520746f206576656e206e756d62657260008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f636f6e7472616374000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f43616e6e6f7420726564756365206c696d6974206f6620706978656c732e0000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f74206d696e74206d6f726520706978656c73207468616e2061766160008201527f696c61626c650000000000000000000000000000000000000000000000000000602082015250565b7f4d696e696d756d206665652063616e6e6f74206265206772656174657220746860008201527f616e207374617274696e67206665650000000000000000000000000000000000602082015250565b7f507572636861736520776f756c64206d696e74206d6f726520706978656c732060008201527f7468616e20617661696c61626c65000000000000000000000000000000000000602082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600060443d1015613dd857613e5b565b613de06131dc565b60043d036004823e80513d602482011167ffffffffffffffff82111715613e08575050613e5b565b808201805167ffffffffffffffff811115613e265750505050613e5b565b80602083010160043d038501811115613e43575050505050613e5b565b613e5282602001850186613571565b82955050505050505b90565b613e678161345f565b8114613e7257600080fd5b50565b613e7e81613471565b8114613e8957600080fd5b50565b613e958161347d565b8114613ea057600080fd5b50565b613eac816134a9565b8114613eb757600080fd5b50565b613ec3816134c5565b8114613ece57600080fd5b50565b613eda816134f3565b8114613ee557600080fd5b5056fea2646970667358221220c663ad7e8defc1775f3999b7b3a5877c6c18178d83462fc2f0a1568351679f8864736f6c6343000807003368747470733a2f2f67616d652e6578616d706c652f6170692f6974656d2f7b69647d2e6a736f6e",
  "deployedBytecode": "0x6080604052600436106101135760003560e01c8063662ad59b116100a0578063e8a3d48511610064578063e8a3d485146103a1578063e985e9c5146103cc578063f242432a14610409578063f2fde38b14610432578063f3e4160c1461045b57610113565b8063662ad59b146102e2578063715018a61461030d5780637f733979146103245780638da5cb5b1461034d578063a22cb4651461037857610113565b806323cf0a22116100e757806323cf0a221461020c5780632eb2c2d6146102285780634e1273f4146102515780635b65b9ab1461028e5780635bcabf04146102b757610113565b8062fdd58e1461011857806301ffc9a7146101555780630e89341c14610192578063204e6dfa146101cf575b600080fd5b34801561012457600080fd5b5061013f600480360381019061013a9190612639565b610486565b60405161014c919061317d565b60405180910390f35b34801561016157600080fd5b5061017c600480360381019061017791906126f1565b61054f565b6040516101899190612ec0565b60405180910390f35b34801561019e57600080fd5b506101b960048036038101906101b491906127a5565b610631565b6040516101c69190612edb565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f19190612778565b6106a9565b604051610203919061317d565b60405180910390f35b61022660048036038101906102219190612778565b61079b565b005b34801561023457600080fd5b5061024f600480360381019061024a9190612493565b6109dc565b005b34801561025d57600080fd5b5061027860048036038101906102739190612679565b610a7d565b6040516102859190612e29565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b091906127d2565b610b96565b005b3480156102c357600080fd5b506102cc610c9b565b6040516102d99190612edb565b60405180910390f35b3480156102ee57600080fd5b506102f7610d29565b604051610304919061317d565b60405180910390f35b34801561031957600080fd5b50610322610d2f565b005b34801561033057600080fd5b5061034b6004803603810190610346919061274b565b610db7565b005b34801561035957600080fd5b50610362610f06565b60405161036f9190612d4c565b60405180910390f35b34801561038457600080fd5b5061039f600480360381019061039a91906125f9565b610f30565b005b3480156103ad57600080fd5b506103b6610f46565b6040516103c39190612edb565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee9190612453565b610f6e565b6040516104009190612ec0565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b9190612562565b611002565b005b34801561043e57600080fd5b5061045960048036038101906104549190612426565b6110a3565b005b34801561046757600080fd5b5061047061119b565b60405161047d919061317d565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee90612f3d565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061061a57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061062a5750610629826111a1565b5b9050919050565b60606005548210610677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066e90612fbd565b60405180910390fd5b60066106828361120b565b604051602001610693929190612cfb565b6040516020818303038152906040529050919050565b60006004548261ffff166005546106c09190613300565b10610700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f7906130dd565b60405180910390fd5b600061072c8361ffff1660095460085460075461071d919061342b565b6107279190613356565b61136c565b9050600854818461ffff16610741919061342b565b61074b91906133d1565b600260095460018461075d919061342b565b61076791906133d1565b6107719190613356565b60075461077e919061342b565b8261078991906133d1565b6107939190613300565b915050919050565b6004548161ffff166005546107b09190613300565b106107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e79061309d565b60405180910390fd5b60006107fb826106a9565b905080341015610840576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083790612f9d565b60405180910390fd5b60008261ffff1667ffffffffffffffff8111156108605761085f613734565b5b60405190808252806020026020018201604052801561088e5781602001602082028036833780820191505090505b50905060008361ffff1667ffffffffffffffff8111156108b1576108b0613734565b5b6040519080825280602002602001820160405280156108df5781602001602082028036833780820191505090505b50905060005b8461ffff168161ffff161015610962578061ffff166005546109079190613300565b838261ffff168151811061091e5761091d613705565b5b6020026020010181815250506001828261ffff168151811061094357610942613705565b5b602002602001018181525050808061095a906135a2565b9150506108e5565b5061097e33838360405180602001604052806000815250611385565b8361ffff16600560008282546109949190613300565b925050819055507fd6b57320ab15ddd95b8d4d4b698b80337cd15aec82315f019d6fefecebc497db8284346040516109ce93929190612e82565b60405180910390a150505050565b6109e46115a3565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610a2a5750610a2985610a246115a3565b610f6e565b5b610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a609061301d565b60405180910390fd5b610a7685858585856115ab565b5050505050565b60608151835114610ac3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aba9061311d565b60405180910390fd5b6000835167ffffffffffffffff811115610ae057610adf613734565b5b604051908082528060200260200182016040528015610b0e5781602001602082028036833780820191505090505b50905060005b8451811015610b8b57610b5b858281518110610b3357610b32613705565b5b6020026020010151858381518110610b4e57610b4d613705565b5b6020026020010151610486565b828281518110610b6e57610b6d613705565b5b60200260200101818152505080610b84906135cd565b9050610b14565b508091505092915050565b610b9e6115a3565b73ffffffffffffffffffffffffffffffffffffffff16610bbc610f06565b73ffffffffffffffffffffffffffffffffffffffff1614610c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c099061307d565b60405180910390fd5b828210610c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4b906130bd565b60405180910390fd5b633b9aca0083610c6491906133d1565b600781905550633b9aca0082610c7a91906133d1565b600881905550633b9aca0081610c9091906133d1565b600981905550505050565b60068054610ca89061353f565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd49061353f565b8015610d215780601f10610cf657610100808354040283529160200191610d21565b820191906000526020600020905b815481529060010190602001808311610d0457829003601f168201915b505050505081565b60055481565b610d376115a3565b73ffffffffffffffffffffffffffffffffffffffff16610d55610f06565b73ffffffffffffffffffffffffffffffffffffffff1614610dab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da29061307d565b60405180910390fd5b610db560006118bf565b565b610dbf6115a3565b73ffffffffffffffffffffffffffffffffffffffff16610ddd610f06565b73ffffffffffffffffffffffffffffffffffffffff1614610e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2a9061307d565b60405180910390fd5b6000600282610e429190613616565b6fffffffffffffffffffffffffffffffff1614610e94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8b90612fdd565b60405180910390fd5b60008182610ea29190613387565b6fffffffffffffffffffffffffffffffff169050600454811015610efb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef29061305d565b60405180910390fd5b806004819055505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f42610f3b6115a3565b8383611985565b5050565b60606006604051602001610f5a9190612d2a565b604051602081830303815290604052905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61100a6115a3565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611050575061104f8561104a6115a3565b610f6e565b5b61108f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108690612f7d565b60405180910390fd5b61109c8585858585611af2565b5050505050565b6110ab6115a3565b73ffffffffffffffffffffffffffffffffffffffff166110c9610f06565b73ffffffffffffffffffffffffffffffffffffffff161461111f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111169061307d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561118f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118690612f5d565b60405180910390fd5b611198816118bf565b50565b60045481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606000821415611253576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611367565b600082905060005b6000821461128557808061126e906135cd565b915050600a8261127e9190613356565b915061125b565b60008167ffffffffffffffff8111156112a1576112a0613734565b5b6040519080825280601f01601f1916602001820160405280156112d35781602001600182028036833780820191505090505b5090505b60008514611360576001826112ec919061342b565b9150600a856112fb9190613647565b60306113079190613300565b60f81b81838151811061131d5761131c613705565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856113599190613356565b94506112d7565b8093505050505b919050565b600081831061137b578161137d565b825b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156113f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ec9061315d565b60405180910390fd5b8151835114611439576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114309061313d565b60405180910390fd5b60006114436115a3565b905061145481600087878787611d74565b60005b845181101561150d5783818151811061147357611472613705565b5b602002602001015160008087848151811061149157611490613705565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114f39190613300565b925050819055508080611505906135cd565b915050611457565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611585929190612e4b565b60405180910390a461159c81600087878787611d7c565b5050505050565b600033905090565b81518351146115ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e69061313d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561165f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165690612ffd565b60405180910390fd5b60006116696115a3565b9050611679818787878787611d74565b60005b845181101561182a57600085828151811061169a57611699613705565b5b6020026020010151905060008583815181106116b9576116b8613705565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561175a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117519061303d565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461180f9190613300565b9250508190555050505080611823906135cd565b905061167c565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118a1929190612e4b565b60405180910390a46118b7818787878787611d7c565b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119eb906130fd565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ae59190612ec0565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5990612ffd565b60405180910390fd5b6000611b6c6115a3565b9050611b8c818787611b7d88611f63565b611b8688611f63565b87611d74565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015611c23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1a9061303d565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611cd89190613300565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051611d55929190613198565b60405180910390a4611d6b828888888888611fdd565b50505050505050565b505050505050565b611d9b8473ffffffffffffffffffffffffffffffffffffffff166121c4565b15611f5b578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611de1959493929190612d67565b602060405180830381600087803b158015611dfb57600080fd5b505af1925050508015611e2c57506040513d601f19601f82011682018060405250810190611e29919061271e565b60015b611ed257611e38613763565b806308c379a01415611e955750611e4d613dc8565b80611e585750611e97565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8c9190612edb565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec990612efd565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611f59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5090612f1d565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115611f8257611f81613734565b5b604051908082528060200260200182016040528015611fb05781602001602082028036833780820191505090505b5090508281600081518110611fc857611fc7613705565b5b60200260200101818152505080915050919050565b611ffc8473ffffffffffffffffffffffffffffffffffffffff166121c4565b156121bc578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612042959493929190612dcf565b602060405180830381600087803b15801561205c57600080fd5b505af192505050801561208d57506040513d601f19601f8201168201806040525081019061208a919061271e565b60015b61213357612099613763565b806308c379a014156120f657506120ae613dc8565b806120b957506120f8565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ed9190612edb565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212a90612efd565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146121ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b190612f1d565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006121fa6121f5846131e6565b6131c1565b9050808382526020820190508285602086028201111561221d5761221c61378a565b5b60005b8581101561224d57816122338882612309565b845260208401935060208301925050600181019050612220565b5050509392505050565b600061226a61226584613212565b6131c1565b9050808382526020820190508285602086028201111561228d5761228c61378a565b5b60005b858110156122bd57816122a38882612411565b845260208401935060208301925050600181019050612290565b5050509392505050565b60006122da6122d58461323e565b6131c1565b9050828152602081018484840111156122f6576122f561378f565b5b6123018482856134fd565b509392505050565b60008135905061231881613e5e565b92915050565b600082601f83011261233357612332613785565b5b81356123438482602086016121e7565b91505092915050565b600082601f83011261236157612360613785565b5b8135612371848260208601612257565b91505092915050565b60008135905061238981613e75565b92915050565b60008135905061239e81613e8c565b92915050565b6000815190506123b381613e8c565b92915050565b600082601f8301126123ce576123cd613785565b5b81356123de8482602086016122c7565b91505092915050565b6000813590506123f681613ea3565b92915050565b60008135905061240b81613eba565b92915050565b60008135905061242081613ed1565b92915050565b60006020828403121561243c5761243b613799565b5b600061244a84828501612309565b91505092915050565b6000806040838503121561246a57612469613799565b5b600061247885828601612309565b925050602061248985828601612309565b9150509250929050565b600080600080600060a086880312156124af576124ae613799565b5b60006124bd88828901612309565b95505060206124ce88828901612309565b945050604086013567ffffffffffffffff8111156124ef576124ee613794565b5b6124fb8882890161234c565b935050606086013567ffffffffffffffff81111561251c5761251b613794565b5b6125288882890161234c565b925050608086013567ffffffffffffffff81111561254957612548613794565b5b612555888289016123b9565b9150509295509295909350565b600080600080600060a0868803121561257e5761257d613799565b5b600061258c88828901612309565b955050602061259d88828901612309565b94505060406125ae88828901612411565b93505060606125bf88828901612411565b925050608086013567ffffffffffffffff8111156125e0576125df613794565b5b6125ec888289016123b9565b9150509295509295909350565b600080604083850312156126105761260f613799565b5b600061261e85828601612309565b925050602061262f8582860161237a565b9150509250929050565b600080604083850312156126505761264f613799565b5b600061265e85828601612309565b925050602061266f85828601612411565b9150509250929050565b600080604083850312156126905761268f613799565b5b600083013567ffffffffffffffff8111156126ae576126ad613794565b5b6126ba8582860161231e565b925050602083013567ffffffffffffffff8111156126db576126da613794565b5b6126e78582860161234c565b9150509250929050565b60006020828403121561270757612706613799565b5b60006127158482850161238f565b91505092915050565b60006020828403121561273457612733613799565b5b6000612742848285016123a4565b91505092915050565b60006020828403121561276157612760613799565b5b600061276f848285016123e7565b91505092915050565b60006020828403121561278e5761278d613799565b5b600061279c848285016123fc565b91505092915050565b6000602082840312156127bb576127ba613799565b5b60006127c984828501612411565b91505092915050565b6000806000606084860312156127eb576127ea613799565b5b60006127f986828701612411565b935050602061280a86828701612411565b925050604061281b86828701612411565b9150509250925092565b60006128318383612cdd565b60208301905092915050565b6128468161345f565b82525050565b600061285782613294565b61286181856132c2565b935061286c8361326f565b8060005b8381101561289d5781516128848882612825565b975061288f836132b5565b925050600181019050612870565b5085935050505092915050565b6128b381613471565b82525050565b60006128c48261329f565b6128ce81856132d3565b93506128de81856020860161350c565b6128e78161379e565b840191505092915050565b60006128fd826132aa565b61290781856132e4565b935061291781856020860161350c565b6129208161379e565b840191505092915050565b6000612936826132aa565b61294081856132f5565b935061295081856020860161350c565b80840191505092915050565b600081546129698161353f565b61297381866132f5565b9450600182166000811461298e576001811461299f576129d2565b60ff198316865281860193506129d2565b6129a88561327f565b60005b838110156129ca578154818901526001820191506020810190506129ab565b838801955050505b50505092915050565b60006129e86034836132e4565b91506129f3826137bc565b604082019050919050565b6000612a0b6028836132e4565b9150612a168261380b565b604082019050919050565b6000612a2e602b836132e4565b9150612a398261385a565b604082019050919050565b6000612a516026836132e4565b9150612a5c826138a9565b604082019050919050565b6000612a746006836132f5565b9150612a7f826138f8565b600682019050919050565b6000612a976029836132e4565b9150612aa282613921565b604082019050919050565b6000612aba602f836132e4565b9150612ac582613970565b604082019050919050565b6000612add6014836132e4565b9150612ae8826139bf565b602082019050919050565b6000612b006021836132e4565b9150612b0b826139e8565b604082019050919050565b6000612b236025836132e4565b9150612b2e82613a37565b604082019050919050565b6000612b466032836132e4565b9150612b5182613a86565b604082019050919050565b6000612b696008836132f5565b9150612b7482613ad5565b600882019050919050565b6000612b8c602a836132e4565b9150612b9782613afe565b604082019050919050565b6000612baf601e836132e4565b9150612bba82613b4d565b602082019050919050565b6000612bd26020836132e4565b9150612bdd82613b76565b602082019050919050565b6000612bf56026836132e4565b9150612c0082613b9f565b604082019050919050565b6000612c18602f836132e4565b9150612c2382613bee565b604082019050919050565b6000612c3b602e836132e4565b9150612c4682613c3d565b604082019050919050565b6000612c5e6029836132e4565b9150612c6982613c8c565b604082019050919050565b6000612c816029836132e4565b9150612c8c82613cdb565b604082019050919050565b6000612ca46028836132e4565b9150612caf82613d2a565b604082019050919050565b6000612cc76021836132e4565b9150612cd282613d79565b604082019050919050565b612ce6816134f3565b82525050565b612cf5816134f3565b82525050565b6000612d07828561295c565b9150612d1282612a67565b9150612d1e828461292b565b91508190509392505050565b6000612d36828461295c565b9150612d4182612b5c565b915081905092915050565b6000602082019050612d61600083018461283d565b92915050565b600060a082019050612d7c600083018861283d565b612d89602083018761283d565b8181036040830152612d9b818661284c565b90508181036060830152612daf818561284c565b90508181036080830152612dc381846128b9565b90509695505050505050565b600060a082019050612de4600083018861283d565b612df1602083018761283d565b612dfe6040830186612cec565b612e0b6060830185612cec565b8181036080830152612e1d81846128b9565b90509695505050505050565b60006020820190508181036000830152612e43818461284c565b905092915050565b60006040820190508181036000830152612e65818561284c565b90508181036020830152612e79818461284c565b90509392505050565b60006060820190508181036000830152612e9c818661284c565b9050612eab6020830185612cec565b612eb86040830184612cec565b949350505050565b6000602082019050612ed560008301846128aa565b92915050565b60006020820190508181036000830152612ef581846128f2565b905092915050565b60006020820190508181036000830152612f16816129db565b9050919050565b60006020820190508181036000830152612f36816129fe565b9050919050565b60006020820190508181036000830152612f5681612a21565b9050919050565b60006020820190508181036000830152612f7681612a44565b9050919050565b60006020820190508181036000830152612f9681612a8a565b9050919050565b60006020820190508181036000830152612fb681612aad565b9050919050565b60006020820190508181036000830152612fd681612ad0565b9050919050565b60006020820190508181036000830152612ff681612af3565b9050919050565b6000602082019050818103600083015261301681612b16565b9050919050565b6000602082019050818103600083015261303681612b39565b9050919050565b6000602082019050818103600083015261305681612b7f565b9050919050565b6000602082019050818103600083015261307681612ba2565b9050919050565b6000602082019050818103600083015261309681612bc5565b9050919050565b600060208201905081810360008301526130b681612be8565b9050919050565b600060208201905081810360008301526130d681612c0b565b9050919050565b600060208201905081810360008301526130f681612c2e565b9050919050565b6000602082019050818103600083015261311681612c51565b9050919050565b6000602082019050818103600083015261313681612c74565b9050919050565b6000602082019050818103600083015261315681612c97565b9050919050565b6000602082019050818103600083015261317681612cba565b9050919050565b60006020820190506131926000830184612cec565b92915050565b60006040820190506131ad6000830185612cec565b6131ba6020830184612cec565b9392505050565b60006131cb6131dc565b90506131d78282613571565b919050565b6000604051905090565b600067ffffffffffffffff82111561320157613200613734565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561322d5761322c613734565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561325957613258613734565b5b6132628261379e565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061330b826134f3565b9150613316836134f3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561334b5761334a613678565b5b828201905092915050565b6000613361826134f3565b915061336c836134f3565b92508261337c5761337b6136a7565b5b828204905092915050565b6000613392826134a9565b915061339d836134a9565b9250816fffffffffffffffffffffffffffffffff04831182151516156133c6576133c5613678565b5b828202905092915050565b60006133dc826134f3565b91506133e7836134f3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156134205761341f613678565b5b828202905092915050565b6000613436826134f3565b9150613441836134f3565b92508282101561345457613453613678565b5b828203905092915050565b600061346a826134d3565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561352a57808201518184015260208101905061350f565b83811115613539576000848401525b50505050565b6000600282049050600182168061355757607f821691505b6020821081141561356b5761356a6136d6565b5b50919050565b61357a8261379e565b810181811067ffffffffffffffff8211171561359957613598613734565b5b80604052505050565b60006135ad826134c5565b915061ffff8214156135c2576135c1613678565b5b600182019050919050565b60006135d8826134f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561360b5761360a613678565b5b600182019050919050565b6000613621826134a9565b915061362c836134a9565b92508261363c5761363b6136a7565b5b828206905092915050565b6000613652826134f3565b915061365d836134f3565b92508261366d5761366c6136a7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156137825760046000803e61377f6000516137af565b90505b90565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f706978656c2f0000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e742076616c756520617474616368656420666f722060008201527f6d696e74696e6720726571756573740000000000000000000000000000000000602082015250565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b7f43616e206f6e6c79207365742073697a6520746f206576656e206e756d62657260008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f636f6e7472616374000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f43616e6e6f7420726564756365206c696d6974206f6620706978656c732e0000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f74206d696e74206d6f726520706978656c73207468616e2061766160008201527f696c61626c650000000000000000000000000000000000000000000000000000602082015250565b7f4d696e696d756d206665652063616e6e6f74206265206772656174657220746860008201527f616e207374617274696e67206665650000000000000000000000000000000000602082015250565b7f507572636861736520776f756c64206d696e74206d6f726520706978656c732060008201527f7468616e20617661696c61626c65000000000000000000000000000000000000602082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600060443d1015613dd857613e5b565b613de06131dc565b60043d036004823e80513d602482011167ffffffffffffffff82111715613e08575050613e5b565b808201805167ffffffffffffffff811115613e265750505050613e5b565b80602083010160043d038501811115613e43575050505050613e5b565b613e5282602001850186613571565b82955050505050505b90565b613e678161345f565b8114613e7257600080fd5b50565b613e7e81613471565b8114613e8957600080fd5b50565b613e958161347d565b8114613ea057600080fd5b50565b613eac816134a9565b8114613eb757600080fd5b50565b613ec3816134c5565b8114613ece57600080fd5b50565b613eda816134f3565b8114613ee557600080fd5b5056fea2646970667358221220c663ad7e8defc1775f3999b7b3a5877c6c18178d83462fc2f0a1568351679f8864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/SimplePixel.sol:SimplePixel",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/SimplePixel.sol:SimplePixel",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 138,
        "contract": "contracts/SimplePixel.sol:SimplePixel",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/SimplePixel.sol:SimplePixel",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2034,
        "contract": "contracts/SimplePixel.sol:SimplePixel",
        "label": "maxPixels",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2037,
        "contract": "contracts/SimplePixel.sol:SimplePixel",
        "label": "pixels",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2039,
        "contract": "contracts/SimplePixel.sol:SimplePixel",
        "label": "baseUrl",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2050,
        "contract": "contracts/SimplePixel.sol:SimplePixel",
        "label": "mintFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2052,
        "contract": "contracts/SimplePixel.sol:SimplePixel",
        "label": "minMintFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2054,
        "contract": "contracts/SimplePixel.sol:SimplePixel",
        "label": "bulkDiscount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}