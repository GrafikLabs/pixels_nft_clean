{
  "address": "0xefC7a57a4ad949240dd9B777344EEc7CBDf234bD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tileContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "apiUrl",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "proxyRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "patchId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "breakPatchFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "firstPatchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondPatchId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "combinePatches",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBounds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "x",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "y",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "width",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            }
          ],
          "internalType": "struct Patch.Rectangle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getOwningAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "getOwningAddressBatch",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getTileOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "getTileOwnerBatch",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getTilePatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "x",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "y",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "width",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            }
          ],
          "internalType": "struct Patch.Rectangle",
          "name": "patchBounds",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintPatchTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseUrl",
          "type": "string"
        }
      ],
      "name": "setBaseUrl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "points",
              "type": "uint8"
            }
          ],
          "internalType": "struct ERC1155NFT.RoyaltyConfig",
          "name": "newConfig",
          "type": "tuple"
        }
      ],
      "name": "setRoyaltyConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x625982c7e487424a1753c694a126b82074640471d39a32d7e36492de00d6cd2d",
  "receipt": {
    "to": null,
    "from": "0x00a82813b2992eE756Ac891264e5c380121dDCF2",
    "contractAddress": "0xefC7a57a4ad949240dd9B777344EEc7CBDf234bD",
    "transactionIndex": 31,
    "gasUsed": "3911284",
    "logsBloom": "0x
    "blockHash": "0xc8216cd1eefd9ff08eb84628aca3b08a66691dff8778933d31ef04bab615530a",
    "transactionHash": "0x625982c7e487424a1753c694a126b82074640471d39a32d7e36492de00d6cd2d",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 10602042,
        "transactionHash": "0x625982c7e487424a1753c694a126b82074640471d39a32d7e36492de00d6cd2d",
        "address": "0xefC7a57a4ad949240dd9B777344EEc7CBDf234bD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000000a82813b2992ee756ac891264e5c380121ddcf2"
        ],
        "data": "0x",
        "logIndex": 81,
        "blockHash": "0xc8216cd1eefd9ff08eb84628aca3b08a66691dff8778933d31ef04bab615530a"
      }
    ],
    "blockNumber": 10602042,
    "cumulativeGasUsed": "24651194",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc78cBB3a909e0168991BF3e5409dc48FC0BC9648",
    "https://pixels.watch/api/v1/",
    "0x1E525EEAF261cA41b809884CBDE9DD9E1619573A"
  ],
  "numDeployments": 3,
  "solcInputHash": "72a1fcedc7473ee55f9322b776bb635e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tileContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"apiUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proxyRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"patchId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"breakPatchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstPatchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondPatchId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"combinePatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBounds\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"internalType\":\"struct Patch.Rectangle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOwningAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getOwningAddressBatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTileOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getTileOwnerBatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTilePatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"internalType\":\"struct Patch.Rectangle\",\"name\":\"patchBounds\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintPatchTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseUrl\",\"type\":\"string\"}],\"name\":\"setBaseUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"points\",\"type\":\"uint8\"}],\"internalType\":\"struct ERC1155NFT.RoyaltyConfig\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"setRoyaltyConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"combinePatches(uint256,uint256,address)\":{\"details\":\"Combine two patches. Must have the same width or heigh and be adjacent. The resulting shape must be a rectanle as well.\"},\"contractURI()\":{\"details\":\"OpenSea spec metadata for the contract - always \\\"<baseUrl>/contract\\\".\"},\"getBounds(uint256)\":{\"details\":\"Gets the bounds of a given patch.\"},\"getOwningAddress(uint256)\":{\"details\":\"Gets the owner of a given token.\"},\"getOwningAddressBatch(uint256[])\":{\"details\":\"Gets the owner(s) of a given batch of tokens.\"},\"getTileOwner(uint256)\":{\"details\":\"Gets the owner of a given tile (if a patch exists).\"},\"getTileOwnerBatch(uint256[])\":{\"details\":\"Gets the owner(s) of a given batch of tiles (if a patch exists).\"},\"getTilePatch(uint256)\":{\"details\":\"Gets the patch for a given tile (if it exists).\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}. This also whitelists the ProxyRegistry used by OpenSea.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"See {IERC2981-royaltyInfo}.\",\"returns\":{\"receiver\":\"will always be the address of the deployer of the contract.\",\"royaltyAmount\":\"will always be 7% of value.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns a unique URI for each token, using a \\\"token/<id>\\\" format, for a wider compatibility compared to \\\"{id}\\\" replacement.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Patch.sol\":\"Patch\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/Patch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./lib/ERC1155NFT.sol\\\";\\nimport \\\"./Tile.sol\\\";\\n\\ncontract Patch is ERC1155NFT {\\n    struct Rectangle {\\n        // Bottom left corner\\n        int256 x;\\n        int256 y;\\n        // Size\\n        uint256 width;\\n        uint256 height;\\n    }\\n\\n    // The tile contract to stash for.\\n    address private _tileContract = address(0);\\n\\n    // The patch extents.\\n    mapping(uint256 => Rectangle) private _bounds;\\n\\n    // Mapping of tile to patch\\n    mapping(uint256 => uint256) private _tileToPatch;\\n\\n    constructor(\\n        address tileContract,\\n        string memory apiUrl,\\n        address proxyRegistryAddress\\n    ) ERC1155NFT(string(abi.encodePacked(apiUrl, \\\"patches/\\\")), proxyRegistryAddress) {\\n        _tileContract = tileContract;\\n    }\\n\\n    /**\\n     * @dev Gets the patch for a given tile (if it exists).\\n     */\\n    function getTilePatch(uint256 id) external view returns (uint256) {\\n        return _tileToPatch[id];\\n    }\\n\\n    /**\\n     * @dev Gets the bounds of a given patch.\\n     */\\n    function getBounds(uint256 id) external view returns (Rectangle memory) {\\n        return _bounds[id];\\n    }\\n\\n    /**\\n     * @dev Gets the owner of a given tile (if a patch exists).\\n     */\\n    function getTileOwner(uint256 id) external view returns (address) {\\n        return _tokenOwners[_tileToPatch[id]];\\n    }\\n\\n    /**\\n     * @dev Gets the owner(s) of a given batch of tiles (if a patch exists).\\n     */\\n    function getTileOwnerBatch(uint256[] memory ids) external view returns (address[] memory) {\\n        address[] memory batchOwners = new address[](ids.length);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            batchOwners[i] = _tokenOwners[_tileToPatch[ids[i]]];\\n        }\\n\\n        return batchOwners;\\n    }\\n\\n    function abs(int256 val) private pure returns (int256) {\\n        return val >= 0 ? val : -val;\\n    }\\n\\n    function idFromXY(int256 x, int256 y) private pure returns (uint256) {\\n        if (x == 0 && y == 0) {\\n            return 0;\\n        }\\n        if (x == 1 && y == 0) {\\n            return 1;\\n        }\\n        if (x == 1 && y == -1) {\\n            return 2;\\n        }\\n        if (x == 0 && y == -1) {\\n            return 3;\\n        }\\n\\n        int256 absX = abs(x);\\n        int256 absY = abs(y);\\n        int256 layer;\\n        int256 layerId;\\n        if (absX > absY || (absX == absY && x < 0)) {\\n            if (x > 0) {\\n                layer = x - 1;\\n                layerId = (layer * 4 + 1) + absX - y - 1;\\n            } else {\\n                layer = absX;\\n                layerId = y - x;\\n            }\\n        } else {\\n            if (y > 0) {\\n                layer = y;\\n                layerId = (layer * 2) + absY + x;\\n            } else {\\n                layer = absY - 1;\\n                layerId = (layer * 6 + 1) - x - y + 1;\\n            }\\n        }\\n\\n        return uint256(((layer) * 2)**2 + layerId);\\n    }\\n\\n    function mintPatchTo(Rectangle memory patchBounds, address to) external {\\n        uint256[] memory batch = new uint256[](patchBounds.width * patchBounds.height);\\n        uint256 newPatchId = mintedTokens++;\\n        _bounds[newPatchId] = patchBounds;\\n        for (uint256 i = 0; i < patchBounds.width; i++) {\\n            for (uint256 j = 0; j < patchBounds.height; j++) {\\n                uint256 id = idFromXY(patchBounds.x + int256(i), patchBounds.y + int256(j));\\n                require(id < Tile(_tileContract).mintedTiles(), \\\"Rect out of bounds\\\");\\n                batch[j * patchBounds.width + i] = id;\\n                _tileToPatch[id] = newPatchId;\\n            }\\n        }\\n\\n        Tile(_tileContract).stashBatch(to, batch);\\n        _tokenOwners.push(to);\\n        emit TransferSingle(msg.sender, address(0), to, newPatchId, 1);\\n    }\\n\\n    function breakPatchFrom(uint256 patchId, address from) external {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"ERC1155: caller is not approved\\\"\\n        );\\n        require(_tokenOwners[patchId] == from, \\\"ERC1155: insufficient balance\\\");\\n        Rectangle memory patchBounds = _bounds[patchId];\\n        uint256[] memory batch = new uint256[](patchBounds.width * patchBounds.height);\\n        for (uint256 i = 0; i < patchBounds.width; i++) {\\n            for (uint256 j = 0; j < patchBounds.height; j++) {\\n                uint256 id = idFromXY(patchBounds.x + int256(i), patchBounds.y + int256(j));\\n                batch[j * patchBounds.width + i] = id;\\n                _tileToPatch[id] = 0;\\n            }\\n        }\\n\\n        Tile(_tileContract).unstashBatch(from, batch);\\n        _tokenOwners[patchId] = address(0);\\n        emit TransferSingle(msg.sender, from, address(0), patchId, 1);\\n    }\\n\\n    /**\\n     * @dev Combine two patches. Must have the same width or heigh and be adjacent.\\n     * The resulting shape must be a rectanle as well.\\n     */\\n    function combinePatches(\\n        uint256 firstPatchId,\\n        uint256 secondPatchId,\\n        address to\\n    ) external {\\n        Rectangle memory firstPatch = _bounds[firstPatchId];\\n        Rectangle memory secondPatch = _bounds[secondPatchId];\\n        Rectangle memory result;\\n        if (firstPatch.x == secondPatch.x) {\\n            require(firstPatch.width == secondPatch.width, \\\"Mismatched sizes\\\");\\n            if (firstPatch.y == secondPatch.y + int256(secondPatch.height)) {\\n                // first is on top of second.\\n                result = Rectangle({\\n                    x: secondPatch.x,\\n                    y: secondPatch.y,\\n                    width: secondPatch.width,\\n                    height: secondPatch.height + firstPatch.height\\n                });\\n            } else if (secondPatch.y == firstPatch.y + int256(firstPatch.height)) {\\n                // second is on top of first.\\n                result = Rectangle({\\n                    x: firstPatch.x,\\n                    y: firstPatch.y,\\n                    width: firstPatch.width,\\n                    height: firstPatch.height + secondPatch.height\\n                });\\n            } else {\\n                revert(\\\"Not adjacent\\\");\\n            }\\n        } else if (firstPatch.y == secondPatch.y) {\\n            require(firstPatch.height == secondPatch.height, \\\"Mismatched sizes\\\");\\n            if (firstPatch.x == secondPatch.x + int256(secondPatch.width)) {\\n                // first is on the right of second.\\n                result = Rectangle({\\n                    x: secondPatch.x,\\n                    y: secondPatch.y,\\n                    width: secondPatch.width + firstPatch.width,\\n                    height: secondPatch.height\\n                });\\n            } else if (secondPatch.x == firstPatch.x + int256(firstPatch.width)) {\\n                // second is on the right of first.\\n                result = Rectangle({\\n                    x: firstPatch.x,\\n                    y: firstPatch.y,\\n                    width: firstPatch.width + secondPatch.width,\\n                    height: firstPatch.height\\n                });\\n            } else {\\n                revert(\\\"Not adjacent\\\");\\n            }\\n        } else {\\n            revert(\\\"Resulting shape not rectangle.\\\");\\n        }\\n\\n        uint256 newPatchId = mintedTokens++;\\n        _bounds[newPatchId] = result;\\n        for (uint256 i = 0; i < result.width; i++) {\\n            for (uint256 j = 0; j < result.height; j++) {\\n                uint256 id = idFromXY(result.x + int256(i), result.y + int256(j));\\n                _tileToPatch[id] = newPatchId;\\n            }\\n        }\\n\\n        _tokenOwners.push(to);\\n\\n        // Burn\\n        uint256[] memory ids = new uint256[](2);\\n        ids[0] = firstPatchId;\\n        ids[1] = secondPatchId;\\n        uint256[] memory ones = new uint256[](2);\\n        ones[0] = 1;\\n        ones[1] = 1;\\n        require(_tokenOwners[firstPatchId] == to, \\\"ERC1155: insufficient balance\\\");\\n        _tokenOwners[firstPatchId] = address(0);\\n        require(_tokenOwners[secondPatchId] == to, \\\"ERC1155: insufficient balance\\\");\\n        _tokenOwners[secondPatchId] = address(0);\\n        emit TransferBatch(msg.sender, to, address(0), ids, ones);\\n\\n        // Mint new\\n        emit TransferSingle(msg.sender, address(0), to, newPatchId, 1);\\n    }\\n}\\n\",\"keccak256\":\"0x36caa9e5b2ebc804fd2d41605f8d0e6281e249998a9ff6beba56562fc96da109\",\"license\":\"MIT\"},\"contracts/Tile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./lib/ERC1155NFT.sol\\\";\\n\\ncontract Tile is ERC1155NFT {\\n    struct Fees {\\n        // Charged for the first tile minted in a batch.\\n        uint256 mintFee;\\n        // Each tile in the same batch is this much cheaper than the previous one.\\n        uint256 bulkDiscount;\\n        // Minimum fee to be charged for the last tiles in a batch.\\n        uint256 mintFeeMin;\\n    }\\n\\n    struct Limits {\\n        // The size of the board.\\n        uint128 size;\\n        // The maximum number of tiles that can be minted in one batch.\\n        uint16 batchSize;\\n        // The number of tiles that are free for the contract deployer *only*.\\n        uint256 deployerDiscountedTiles;\\n    }\\n\\n    // A contract allowed to stash/unstash tiles (used for making blocks).\\n    address private _stasher = address(0);\\n\\n    // Fees - use getMintCost to query.\\n    Fees private _fees;\\n\\n    // Limits - use maxTiles / maxMintSize to query.\\n    Limits private _limits;\\n\\n    // Account that deployed the contract.\\n    address private _deployer;\\n\\n    constructor(\\n        Limits memory initialLimits,\\n        Fees memory initialFees,\\n        string memory apiUrl,\\n        address proxyRegistryAddress\\n    ) ERC1155NFT(string(abi.encodePacked(apiUrl, \\\"tiles/\\\")), proxyRegistryAddress) {\\n        require(initialFees.mintFeeMin < initialFees.mintFee, \\\"Minimum fee exceeds starting fee\\\");\\n        require(initialLimits.size % 2 == 0, \\\"Size not even\\\");\\n        _fees = Fees({\\n            mintFee: initialFees.mintFee * 10**9,\\n            mintFeeMin: initialFees.mintFeeMin * 10**9,\\n            bulkDiscount: initialFees.bulkDiscount * 10**9\\n        });\\n        _limits = initialLimits;\\n        _deployer = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Gets the current limit to tiles.\\n     */\\n    function maxTiles() public view returns (uint256) {\\n        return _limits.size**2;\\n    }\\n\\n    /**\\n     * @dev Gets the current number of minted tiles\\n     * (convenience function identical to mintedTokens)\\n     */\\n    function mintedTiles() public view returns (uint256) {\\n        return mintedTokens;\\n    }\\n\\n    /**\\n     * @dev Gets the current limit for tiles in a single batch.\\n     * @return the batch limit. If 0, there is no batch limit.\\n     */\\n    function maxMintSize() public view returns (uint16) {\\n        return _limits.batchSize;\\n    }\\n\\n    /**\\n     * @dev Gets the cost of minting tiles.\\n     * @param amount the amount of tiles to mint.\\n     * @return the cost of minting the given amount of tiles. Cost may be 0 for deployer.\\n     */\\n    function getMintCost(uint16 amount) public view returns (uint256) {\\n        // Total owed:\\n        // sum_(x=0)^amount (mintFee - bulkDiscount * x)\\n        // i.e. each subsequent tile is bulkDiscount cheaper than the previous\\n        // one, starting at mintFee for the first one, down to mintFeeMin.\\n        // same as below:\\n        require(mintedTokens + amount <= maxTiles(), \\\"Amount exceeds available\\\");\\n        uint16 exemptAmount = 0;\\n        if (msg.sender == _deployer && _limits.deployerDiscountedTiles > mintedTokens) {\\n            exemptAmount = uint16(Math.min(_limits.deployerDiscountedTiles - mintedTokens, 2**16));\\n        }\\n        if (exemptAmount >= amount) {\\n            return 0;\\n        }\\n        uint256 base = Math.min(\\n            amount - exemptAmount,\\n            (_fees.mintFee - _fees.mintFeeMin) / _fees.bulkDiscount\\n        );\\n        return\\n            base *\\n            (_fees.mintFee - ((base - 1) * _fees.bulkDiscount) / 2) +\\n            (amount - exemptAmount - base) *\\n            _fees.mintFeeMin;\\n    }\\n\\n    /**\\n     * @notice Mint `amount` tiles to address `to`.\\n     * @dev Mints tiles in batch.\\n     * @param amount the amount of tiles to mint.\\n     * @param to the address to mint tiles to (does not have to be msg.sender).\\n     */\\n    function mintTo(uint16 amount, address to) external payable {\\n        require(mintedTokens + amount <= maxTiles(), \\\"Amount exceeds available\\\");\\n        require(maxMintSize() == 0 || amount <= maxMintSize(), \\\"Amount exceeds batch limit\\\");\\n        uint256 transactionTotal = getMintCost(amount);\\n        require(msg.value >= transactionTotal, \\\"Must pay for mint\\\");\\n        uint256[] memory tileIds = new uint256[](amount);\\n        uint256[] memory ones = new uint256[](amount);\\n        for (uint16 i = 0; i < amount; i++) {\\n            tileIds[i] = mintedTokens + i;\\n            ones[i] = 1;\\n            _tokenOwners.push(to);\\n        }\\n        mintedTokens += amount;\\n        _doSafeBatchTransferAcceptanceCheck(msg.sender, address(0), to, tileIds, ones, \\\"\\\");\\n        emit TransferBatch(msg.sender, address(0), to, tileIds, ones);\\n    }\\n\\n    // Stasher API.\\n\\n    modifier onlyStasher() {\\n        require(_stasher == msg.sender, \\\"Not a designated stasher\\\");\\n        _;\\n    }\\n\\n    function stashBatch(address from, uint256[] memory tileIds) external onlyStasher {\\n        uint256[] memory ones = new uint256[](tileIds.length);\\n        for (uint256 i = 0; i < tileIds.length; ++i) {\\n            uint256 id = tileIds[i];\\n\\n            require(_tokenOwners[id] == from, \\\"ERC1155: insufficient balance\\\");\\n            _tokenOwners[id] = address(0);\\n            ones[i] = 1;\\n        }\\n        emit TransferBatch(msg.sender, from, address(0), tileIds, ones);\\n    }\\n\\n    function unstashBatch(address to, uint256[] memory tileIds) external onlyStasher {\\n        uint256[] memory ones = new uint256[](tileIds.length);\\n        for (uint256 i = 0; i < tileIds.length; i++) {\\n            require(tileIds[i] < mintedTokens, \\\"Token does not exist\\\");\\n            ones[i] = 1;\\n        }\\n        _safeBatchTransferFrom(address(0), to, tileIds, ones, \\\"\\\");\\n    }\\n\\n    // Owner API.\\n\\n    function setFees(Fees memory newFees) external onlyOwner {\\n        require(newFees.mintFeeMin < newFees.mintFee, \\\"Minimum fee exceeds starting fee\\\");\\n        _fees = Fees({\\n            mintFee: newFees.mintFee * 10**9,\\n            mintFeeMin: newFees.mintFeeMin * 10**9,\\n            bulkDiscount: newFees.bulkDiscount * 10**9\\n        });\\n    }\\n\\n    function setLimits(Limits memory newLimits) external onlyOwner {\\n        require(newLimits.size % 2 == 0, \\\"Size not even\\\");\\n        require(newLimits.size >= _limits.size, \\\"Size smaller than current\\\");\\n        require(\\n            newLimits.deployerDiscountedTiles == _limits.deployerDiscountedTiles,\\n            \\\"Deployer discount changed\\\"\\n        );\\n        _limits = newLimits;\\n    }\\n\\n    function setBaseUrl(string memory newBaseUrl) public virtual override onlyOwner {\\n        super.setBaseUrl(string(abi.encodePacked(newBaseUrl, \\\"tile/\\\")));\\n    }\\n\\n    function setStasher(address stasherContract) external onlyOwner {\\n        _stasher = stasherContract;\\n    }\\n}\\n\",\"keccak256\":\"0x6779da29bf751c5f1d7bcf53df718a22c8a4821b58a29ca3869b97b4f0b2e3cf\",\"license\":\"MIT\"},\"contracts/lib/ERC1155NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./ProxyRegistry.sol\\\";\\nimport \\\"./IERC2981.sol\\\";\\n\\n// This is largely replicating OpenZeppelin's ERC1155 - private access to owner\\n// mapping was needed for stashing.\\ncontract ERC1155NFT is ERC165, IERC1155, IERC1155MetadataURI, IERC2981, Ownable {\\n    using Address for address;\\n\\n    struct RoyaltyConfig {\\n        // The receiving address of royalty charges.\\n        address target;\\n        // The percentage points (in tenths of a %) to charge in royalties.\\n        uint8 points;\\n    }\\n\\n    // Tokens currently minted.\\n    uint256 public mintedTokens = 0;\\n\\n    // Mapping to owners (0 for stashed tokens).\\n    address[] internal _tokenOwners;\\n\\n    // Wyvern proxy registry address.\\n    address private _proxyRegistryAddress;\\n\\n    // Manual proxies.\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Base URL of API.\\n    string private _baseUrl;\\n\\n    // An address to send royalties for NFT trading to. Can only be set by owner.\\n    RoyaltyConfig private _royaltyConfig;\\n\\n    constructor(string memory apiUrl, address proxyRegistryAddress) {\\n        _baseUrl = apiUrl;\\n        _proxyRegistryAddress = proxyRegistryAddress;\\n        _royaltyConfig = RoyaltyConfig({\\n            target: msg.sender,\\n            points: 70 // 7%\\n        });\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns a unique URI for each token, using a\\n     * \\\"token/<id>\\\" format, for a wider compatibility compared to \\\"{id}\\\"\\n     * replacement.\\n     */\\n    function uri(uint256 id) external view override returns (string memory) {\\n        require(id < mintedTokens, \\\"Token does not exist\\\");\\n        return string(abi.encodePacked(_baseUrl, \\\"token/\\\", Strings.toString(id)));\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance for address(0)\\\");\\n        require(id < mintedTokens, \\\"Token does not exist\\\");\\n        return _tokenOwners[id] == account ? 1 : 0;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts/ids mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev Gets the owner of a given token.\\n     */\\n    function getOwningAddress(uint256 id) external view returns (address) {\\n        return _tokenOwners[id];\\n    }\\n\\n    /**\\n     * @dev Gets the owner(s) of a given batch of tokens.\\n     */\\n    function getOwningAddressBatch(uint256[] memory ids) external view returns (address[] memory) {\\n        address[] memory batchOwners = new address[](ids.length);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            batchOwners[i] = _tokenOwners[ids[i]];\\n        }\\n\\n        return batchOwners;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}. This also whitelists the ProxyRegistry used by OpenSea.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        ProxyRegistry proxyRegistry = ProxyRegistry(_proxyRegistryAddress);\\n        if (address(proxyRegistry.proxies(account)) == operator) {\\n            return true;\\n        }\\n\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external override {\\n        require(id < mintedTokens, \\\"Token does not exist\\\");\\n        require(amount == 1, \\\"Cannot transfer amount > 1\\\");\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"ERC1155: caller is not approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"ERC1155: caller is not approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC2981-royaltyInfo}.\\n     * @return receiver will always be the address of the deployer of the contract.\\n     * @return royaltyAmount will always be 7% of value.\\n     */\\n    function royaltyInfo(uint256, uint256 value)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        receiver = _royaltyConfig.target;\\n        royaltyAmount = (value * _royaltyConfig.points) / 1000;\\n    }\\n\\n    /**\\n     * @dev OpenSea spec metadata for the contract - always \\\"<baseUrl>/contract\\\".\\n     */\\n    function contractURI() external view returns (string memory) {\\n        return string(abi.encodePacked(_baseUrl, \\\"contract\\\"));\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_tokenOwners[id] == from, \\\"ERC1155: insufficient balance\\\");\\n\\n        _tokenOwners[id] = to;\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids/amounts mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n\\n        uint256[] memory ones = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n            require(id < mintedTokens, \\\"Token does not exist\\\");\\n            require(amount == 1, \\\"Cannot transfer amount > 1\\\");\\n\\n            require(_tokenOwners[id] == from, \\\"ERC1155: insufficient balance\\\");\\n            _tokenOwners[id] = to;\\n            ones[i] = 0;\\n        }\\n        emit TransferBatch(msg.sender, from, to, ids, ones);\\n\\n        _doSafeBatchTransferAcceptanceCheck(msg.sender, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens.\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) private {\\n        require(owner != operator, \\\"ERC1155: cannot approve self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver reject\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: to not ERC1155Receiver\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data)\\n            returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver reject\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: to not ERC1155Receiver\\\");\\n            }\\n        }\\n    }\\n\\n    // Owner API.\\n\\n    function withdraw(address payable wallet, uint256 amount) external onlyOwner {\\n        wallet.transfer(amount);\\n    }\\n\\n    function setRoyaltyConfig(RoyaltyConfig memory newConfig) external onlyOwner {\\n        _royaltyConfig = newConfig;\\n    }\\n\\n    function setBaseUrl(string memory newBaseUrl) public virtual onlyOwner {\\n        _baseUrl = newBaseUrl;\\n    }\\n}\\n\",\"keccak256\":\"0x2b9539198a23416547dd8462f27eba2ceba0a4d74d529be1e7f89fa6a46a4046\",\"license\":\"MIT\"},\"contracts/lib/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IERC2981 is IERC165 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x1d0742dbd57f4f5e1bb9c89415d0c80ecbfeb98630d19881c5a6073fb878926a\",\"license\":\"MIT\"},\"contracts/lib/ProxyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n\\ncontract OwnableDelegateProxy {} // solhint-disable-line\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\",\"keccak256\":\"0x8e1422ee43075747741606f5f0a5aac7019b7685baa514ef95cf6e5ec8b24dc1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "combinePatches(uint256,uint256,address)": {
        "details": "Combine two patches. Must have the same width or heigh and be adjacent. The resulting shape must be a rectanle as well."
      },
      "contractURI()": {
        "details": "OpenSea spec metadata for the contract - always \"<baseUrl>/contract\"."
      },
      "getBounds(uint256)": {
        "details": "Gets the bounds of a given patch."
      },
      "getOwningAddress(uint256)": {
        "details": "Gets the owner of a given token."
      },
      "getOwningAddressBatch(uint256[])": {
        "details": "Gets the owner(s) of a given batch of tokens."
      },
      "getTileOwner(uint256)": {
        "details": "Gets the owner of a given tile (if a patch exists)."
      },
      "getTileOwnerBatch(uint256[])": {
        "details": "Gets the owner(s) of a given batch of tiles (if a patch exists)."
      },
      "getTilePatch(uint256)": {
        "details": "Gets the patch for a given tile (if it exists)."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}. This also whitelists the ProxyRegistry used by OpenSea."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "See {IERC2981-royaltyInfo}.",
        "returns": {
          "receiver": "will always be the address of the deployer of the contract.",
          "royaltyAmount": "will always be 7% of value."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns a unique URI for each token, using a \"token/<id>\" format, for a wider compatibility compared to \"{id}\" replacement."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Patch.sol:Patch",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2588,
        "contract": "contracts/Patch.sol:Patch",
        "label": "mintedTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2591,
        "contract": "contracts/Patch.sol:Patch",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2593,
        "contract": "contracts/Patch.sol:Patch",
        "label": "_proxyRegistryAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2599,
        "contract": "contracts/Patch.sol:Patch",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2601,
        "contract": "contracts/Patch.sol:Patch",
        "label": "_baseUrl",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2604,
        "contract": "contracts/Patch.sol:Patch",
        "label": "_royaltyConfig",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(RoyaltyConfig)2585_storage"
      },
      {
        "astId": 947,
        "contract": "contracts/Patch.sol:Patch",
        "label": "_tileContract",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 952,
        "contract": "contracts/Patch.sol:Patch",
        "label": "_bounds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Rectangle)941_storage)"
      },
      {
        "astId": 956,
        "contract": "contracts/Patch.sol:Patch",
        "label": "_tileToPatch",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Rectangle)941_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Patch.Rectangle)",
        "numberOfBytes": "32",
        "value": "t_struct(Rectangle)941_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Rectangle)941_storage": {
        "encoding": "inplace",
        "label": "struct Patch.Rectangle",
        "members": [
          {
            "astId": 934,
            "contract": "contracts/Patch.sol:Patch",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 936,
            "contract": "contracts/Patch.sol:Patch",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 938,
            "contract": "contracts/Patch.sol:Patch",
            "label": "width",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 940,
            "contract": "contracts/Patch.sol:Patch",
            "label": "height",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoyaltyConfig)2585_storage": {
        "encoding": "inplace",
        "label": "struct ERC1155NFT.RoyaltyConfig",
        "members": [
          {
            "astId": 2582,
            "contract": "contracts/Patch.sol:Patch",
            "label": "target",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2584,
            "contract": "contracts/Patch.sol:Patch",
            "label": "points",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}