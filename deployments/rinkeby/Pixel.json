{
  "address": "0xB5066cbB2457F1C1fcC5b4cB09b7b9BeF52FEecE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "initialSize",
          "type": "uint128"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintFeeMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bulkDiscount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "colorFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pixel.Fees",
          "name": "initialFees",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "apiUrl",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "proxyRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "MintedPixels",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "getColors",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        }
      ],
      "name": "getMintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPixels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pixelColors",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pixelsMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32[]",
          "name": "colors",
          "type": "uint32[]"
        }
      ],
      "name": "setColors",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintFeeMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bulkDiscount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "colorFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pixel.Fees",
          "name": "newFees",
          "type": "tuple"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newSize",
          "type": "uint128"
        }
      ],
      "name": "setLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stasherContract",
          "type": "address"
        }
      ],
      "name": "setStasher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "pixelIds",
          "type": "uint256[]"
        }
      ],
      "name": "stashBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "pixelIds",
          "type": "uint256[]"
        }
      ],
      "name": "unstashBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2593bca7cdaba2ac0840ca4302a9a67683f796ee0098e06b55757b58573952ea",
  "receipt": {
    "to": null,
    "from": "0x00a82813b2992eE756Ac891264e5c380121dDCF2",
    "contractAddress": "0xB5066cbB2457F1C1fcC5b4cB09b7b9BeF52FEecE",
    "transactionIndex": 31,
    "gasUsed": "4901528",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000400000000000000020000080000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000400000000000000000000000000000000000080000000000080",
    "blockHash": "0x50c01875c5b6e5669122c6dc565cd159eeef9c0f0a7f4268cb486d32ab2f2137",
    "transactionHash": "0x2593bca7cdaba2ac0840ca4302a9a67683f796ee0098e06b55757b58573952ea",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 10493122,
        "transactionHash": "0x2593bca7cdaba2ac0840ca4302a9a67683f796ee0098e06b55757b58573952ea",
        "address": "0xB5066cbB2457F1C1fcC5b4cB09b7b9BeF52FEecE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000000a82813b2992ee756ac891264e5c380121ddcf2"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0x50c01875c5b6e5669122c6dc565cd159eeef9c0f0a7f4268cb486d32ab2f2137"
      }
    ],
    "blockNumber": 10493122,
    "cumulativeGasUsed": "25918475",
    "status": 1,
    "byzantium": true
  },
  "args": [
    256,
    {
      "mintFee": 999999,
      "mintFeeMin": 9999,
      "bulkDiscount": 999,
      "colorFee": 999
    },
    "https://pixels.watch/api/v1/pixels/",
    "0xf57b2c51ded3a29e6891aba85459d600256cf317"
  ],
  "numDeployments": 1,
  "solcInputHash": "e43f32c5877e8418e9797a6c965aa516",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"initialSize\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeeMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bulkDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colorFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Pixel.Fees\",\"name\":\"initialFees\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"apiUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proxyRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"MintedPixels\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getColors\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"getMintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPixels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pixelColors\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pixelsMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"colors\",\"type\":\"uint32[]\"}],\"name\":\"setColors\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeeMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bulkDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colorFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Pixel.Fees\",\"name\":\"newFees\",\"type\":\"tuple\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newSize\",\"type\":\"uint128\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stasherContract\",\"type\":\"address\"}],\"name\":\"setStasher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pixelIds\",\"type\":\"uint256[]\"}],\"name\":\"stashBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pixelIds\",\"type\":\"uint256[]\"}],\"name\":\"unstashBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token type `id`. If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pixel.sol\":\"Pixel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/Pixel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./lib/ProxyRegistry.sol\\\";\\n\\n// This is largely replicating OpenZeppelin's ERC1155 - private access to owner\\n// mapping was needed for stashing.\\ncontract Pixel is ERC165, IERC1155, IERC1155MetadataURI, Ownable {\\n    using Address for address;\\n\\n    struct Fees {\\n        uint256 mintFee;\\n        uint256 mintFeeMin;\\n        uint256 bulkDiscount;\\n        uint256 colorFee;\\n    }\\n\\n    // Max pixels allowed at this time.\\n    uint256 public maxPixels;\\n\\n    // Pixels currently minted.\\n    uint256 public pixelsMinted = 0;\\n\\n    // Pixel on-chain colors (may be different on web).\\n    uint32[] public pixelColors;\\n\\n    // Mapping to owners (0 for stashed tokens).\\n    address[] private _pixelOwners;\\n\\n    // Wyvern proxy registry address.\\n    address private _proxyRegistryAddress;\\n\\n    // Manual proxies.\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Base URL of API.\\n    string private _baseUrl;\\n\\n    // A contract allowed to stash/unstash pixels (used for making blocks).\\n    address private _stasher = address(0);\\n\\n    // Internal variables - use getMintCost instead.\\n    Fees private _fees;\\n\\n    // Events\\n    event MintedPixels(uint256[] tokenIds);\\n\\n    constructor(uint128 initialSize, Fees memory initialFees, string memory apiUrl, address proxyRegistryAddress) {\\n        require(initialFees.mintFeeMin < initialFees.mintFee, \\\"Minimum fee cannot be greater than starting fee\\\");\\n        require(initialSize % 2 == 0, \\\"Can only set size to even numbers\\\");\\n        maxPixels = initialSize * initialSize;\\n        _baseUrl = apiUrl;\\n        _fees = Fees({\\n            mintFee: initialFees.mintFee * 10 ** 9,\\n            mintFeeMin: initialFees.mintFeeMin * 10 ** 9,\\n            bulkDiscount: initialFees.bulkDiscount * 10 ** 9,\\n            colorFee: initialFees.colorFee * 10 ** 9\\n        });\\n        _proxyRegistryAddress = proxyRegistryAddress;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function uri(uint256 id) public view override returns (string memory) {\\n        require(id < pixelsMinted, \\\"Pixel does not exist\\\");\\n        return string(abi.encodePacked(_baseUrl, \\\"pixel/\\\", Strings.toString(id)));\\n    }\\n\\n    function getColor(uint256 id) public view returns (string memory) {\\n        uint32 color = pixelColors[id];\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(9);\\n        str[0] = '#';\\n        for (uint i = 8; i >= 1; i--) {\\n            str[i] = alphabet[color % 16];\\n            color >>= 4;\\n        }\\n        return string(str);\\n    }\\n\\n    function getColors(uint256[] memory ids) public view returns (string[] memory) {\\n        string[] memory colors = new string[](ids.length);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            colors[i] = getColor(ids[i]);\\n        }\\n        \\n        return colors;\\n    }\\n\\n    function setColors(uint256[] memory ids, uint32[] memory colors) public payable {\\n        require(msg.value >= _fees.colorFee, \\\"Insufficient value attached for color request.\\\");\\n        require(ids.length == colors.length, \\\"ids and colors length mismatch\\\");\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint32 color = colors[i];\\n            require(\\n                _pixelOwners[id] == msg.sender || isApprovedForAll(_pixelOwners[id], msg.sender),\\n                \\\"ERC1155: caller is not owner nor approved\\\"\\n            );\\n            pixelColors[id] = color;\\n        }\\n    }\\n\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        require(id < pixelsMinted, \\\"Pixel does not exist\\\");\\n        return _pixelOwners[id] == account ? 1 : 0;\\n    }\\n\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    function getMintCost(uint16 amount) public view returns (uint256) {\\n        // Total owed:\\n        // sum_(x=0)^amount (mintFee - bulkDiscount * x)\\n        // i.e. each subsequent pixel is bulkDiscount cheaper than the previous\\n        // one, starting at mintFee for the first one, down to mintFeeMin.\\n        // same as below:\\n        require (pixelsMinted + amount < maxPixels, \\\"Purchase would mint more pixels than available\\\");\\n        uint256 base = Math.min(amount, (_fees.mintFee-_fees.mintFeeMin)/_fees.bulkDiscount);\\n        return base * (_fees.mintFee - (base - 1) * _fees.bulkDiscount / 2) + (amount - base) * _fees.mintFeeMin;\\n    }\\n\\n    function _pseudorandom() private view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), block.timestamp)));\\n    }\\n\\n    function mintTo(uint16 amount, address to) public payable {\\n        require (pixelsMinted + amount < maxPixels, \\\"Cannot mint more pixels than available\\\");\\n        uint256 transactionTotal = getMintCost(amount);\\n        require(msg.value >= transactionTotal, \\\"Insufficient value attached for minting request\\\");\\n        uint256[] memory pixelIds = new uint256[](amount);\\n        uint256[] memory ones = new uint256[](amount);\\n        uint256 random = _pseudorandom();\\n        for (uint16 i = 0; i < amount; i++) {\\n            pixelIds[i] = pixelsMinted + i;\\n            ones[i] = 1;\\n            _pixelOwners.push(to);\\n            pixelColors.push(uint32(random % 2 ** 32));\\n\\n            // If you buy more than 255, the rest will be black /shrug\\n            random >>= 1;\\n        }\\n        pixelsMinted += amount;\\n        _doSafeBatchTransferAcceptanceCheck(msg.sender, address(0), to, pixelIds, ones, \\\"\\\");\\n        emit TransferBatch(msg.sender, address(0), to, pixelIds, ones);\\n        emit MintedPixels(pixelIds);\\n    }\\n\\n    modifier onlyStasher() {\\n        require(_stasher == msg.sender, \\\"Not a designated stasher.\\\");\\n        _;\\n    }\\n\\n    function stashBatch(address from, uint256[] memory pixelIds) public onlyStasher {\\n        uint256[] memory ones = new uint256[](pixelIds.length);\\n        for (uint256 i = 0; i < pixelIds.length; ++i) {\\n            uint256 id = pixelIds[i];\\n\\n            require(_pixelOwners[id] == from, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _pixelOwners[id] = address(0);\\n            ones[i] = 1;\\n        }\\n        emit TransferBatch(msg.sender, from, address(0), pixelIds, ones);\\n    }\\n\\n    function unstashBatch(address to, uint256[] memory pixelIds) public onlyStasher {\\n        uint256[] memory ones = new uint256[](pixelIds.length);\\n        for (uint256 i = 0; i < pixelIds.length; i++) {\\n            require(pixelIds[i] < pixelsMinted, \\\"Token does not exist\\\");\\n            ones[i] = 1;\\n        }\\n        _safeBatchTransferFrom(address(0), to, pixelIds, ones, \\\"\\\");\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        ProxyRegistry proxyRegistry = ProxyRegistry(_proxyRegistryAddress);\\n        if (address(proxyRegistry.proxies(account)) == operator) {\\n            return true;\\n        }\\n\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(id < pixelsMinted, \\\"Pixel does not exist\\\");\\n        require(amount == 1, \\\"Each pixel is unique - can only transfer 1 of each.\\\");\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return string(abi.encodePacked(_baseUrl, \\\"contract\\\"));\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(_pixelOwners[id] == from, \\\"ERC1155: insufficient balance for transfer\\\");\\n\\n        _pixelOwners[id] = to;\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        uint256[] memory ones = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n            require(id < pixelsMinted, \\\"Pixel does not exist\\\");\\n            require(amount == 1, \\\"Each pixel is unique - can only transfer 1 of each.\\\");\\n\\n            require(_pixelOwners[id] == from, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _pixelOwners[id] = to;\\n            ones[i] = 0;\\n        }\\n        emit TransferBatch(msg.sender, from, to, ids, ones);\\n\\n        _doSafeBatchTransferAcceptanceCheck(msg.sender, from, to, ids, amounts, data);\\n    }\\n\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function setFee(Fees memory newFees) public onlyOwner {\\n        require(newFees.mintFeeMin < newFees.mintFee, \\\"Minimum fee cannot be greater than starting fee\\\");\\n        require(newFees.colorFee < 1000000, \\\"Color fee cannot exceed 1,000,000 gwei\\\");\\n        _fees = Fees({\\n            mintFee: newFees.mintFee * 10 ** 9,\\n            mintFeeMin: newFees.mintFeeMin * 10 ** 9,\\n            bulkDiscount: newFees.bulkDiscount * 10 ** 9,\\n            colorFee: newFees.colorFee * 10 ** 9\\n        });\\n    }\\n\\n    function setLimit(uint128 newSize) public onlyOwner {\\n        require(newSize % 2 == 0, \\\"Can only set size to even numbers\\\");\\n        uint256 newLimit = newSize * newSize;\\n        require(newLimit >= maxPixels, \\\"Cannot reduce limit of pixels.\\\");\\n        maxPixels = newLimit;\\n    }\\n\\n    function setStasher(address stasherContract) public onlyOwner {\\n        _stasher = stasherContract;\\n    }\\n}\",\"keccak256\":\"0x550772e4901ed1b047c80333146c9b0381d10745ac206756cf29dd0959ce7b3c\",\"license\":\"MIT\"},\"contracts/lib/ProxyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ncontract OwnableDelegateProxy {}\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\",\"keccak256\":\"0x7f8bdae74aba87d00a9bb725d7869b0b950fd3fd25e3ae8d11370006a85f742f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101655760003560e01c806380057b9a116100d1578063a22cb4651161008a578063e985e9c511610064578063e985e9c514610541578063f242432a1461057e578063f2fde38b146105a7578063f3e4160c146105d057610165565b8063a22cb465146104c4578063a7701fa5146104ed578063e8a3d4851461051657610165565b806380057b9a1461039d5780638a5a72fd146103da5780638da5cb5b146104175780639327f04e1461044257806396d12bc41461046b57806399b71f32146104a857610165565b80634e1273f4116101235780634e1273f4146102a357806354c0de4a146102e0578063715018a614610309578063726c8b29146103205780637d1391b61461034b5780637f7339791461037457610165565b8062fdd58e1461016a57806301ffc9a7146101a75780630e89341c146101e457806316a8f26514610221578063204e6dfa1461023d5780632eb2c2d61461027a575b600080fd5b34801561017657600080fd5b50610191600480360381019061018c9190613474565b6105fb565b60405161019e919061431e565b60405180910390f35b3480156101b357600080fd5b506101ce60048036038101906101c991906135ed565b610736565b6040516101db9190613fc1565b60405180910390f35b3480156101f057600080fd5b5061020b6004803603810190610206919061373b565b610818565b6040516102189190613fdc565b60405180910390f35b61023b60048036038101906102369190613575565b610890565b005b34801561024957600080fd5b50610264600480360381019061025f91906136ce565b610ac1565b604051610271919061431e565b60405180910390f35b34801561028657600080fd5b506102a1600480360381019061029c9190613272565b610bc5565b005b3480156102af57600080fd5b506102ca60048036038101906102c591906134b4565b610c58565b6040516102d79190613f68565b60405180910390f35b3480156102ec57600080fd5b5061030760048036038101906103029190613674565b610d71565b005b34801561031557600080fd5b5061031e610f1d565b005b34801561032c57600080fd5b50610335610fa5565b604051610342919061431e565b60405180910390f35b34801561035757600080fd5b50610372600480360381019061036d91906133d8565b610fab565b005b34801561038057600080fd5b5061039b600480360381019061039691906136a1565b611276565b005b3480156103a957600080fd5b506103c460048036038101906103bf919061373b565b6113c5565b6040516103d19190613fdc565b60405180910390f35b3480156103e657600080fd5b5061040160048036038101906103fc919061352c565b6115a2565b60405161040e9190613f46565b60405180910390f35b34801561042357600080fd5b5061042c61165f565b6040516104399190613e69565b60405180910390f35b34801561044e57600080fd5b5061046960048036038101906104649190613205565b611688565b005b34801561047757600080fd5b50610492600480360381019061048d919061373b565b611748565b60405161049f9190614362565b60405180910390f35b6104c260048036038101906104bd91906136fb565b611782565b005b3480156104d057600080fd5b506104eb60048036038101906104e69190613434565b611b17565b005b3480156104f957600080fd5b50610514600480360381019061050f91906133d8565b611b26565b005b34801561052257600080fd5b5061052b611cc5565b6040516105389190613fdc565b60405180910390f35b34801561054d57600080fd5b5061056860048036038101906105639190613232565b611ced565b6040516105759190613fc1565b60405180910390f35b34801561058a57600080fd5b506105a560048036038101906105a09190613341565b611e6f565b005b3480156105b357600080fd5b506105ce60048036038101906105c99190613205565b611f89565b005b3480156105dc57600080fd5b506105e5612081565b6040516105f2919061431e565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561066c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106639061405e565b60405180910390fd5b60025482106106b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a7906140be565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16600483815481106106db576106da6149d2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461072857600061072b565b60015b60ff16905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061080157507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610811575061081082612087565b5b9050919050565b6060600254821061085e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610855906140be565b60405180910390fd5b6007610869836120f1565b60405160200161087a929190613e18565b6040516020818303038152906040529050919050565b6009600301543410156108d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cf9061413e565b60405180910390fd5b805182511461091c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109139061403e565b60405180910390fd5b60005b8251811015610abc57600083828151811061093d5761093c6149d2565b5b60200260200101519050600083838151811061095c5761095b6149d2565b5b602002602001015190503373ffffffffffffffffffffffffffffffffffffffff1660048381548110610991576109906149d2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610a225750610a21600483815481106109f0576109ef6149d2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633611ced565b5b610a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a589061409e565b60405180910390fd5b8060038381548110610a7657610a756149d2565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550505080610ab590614855565b905061091f565b505050565b60006001548261ffff16600254610ad89190614532565b10610b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0f9061427e565b60405180910390fd5b6000610b4d8361ffff16600960020154600960010154600960000154610b3e919061465d565b610b489190614588565b612252565b9050600960010154818461ffff16610b65919061465d565b610b6f9190614603565b6002600960020154600184610b84919061465d565b610b8e9190614603565b610b989190614588565b600960000154610ba8919061465d565b82610bb39190614603565b610bbd9190614532565b915050919050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610c055750610c048533611ced565b5b610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b9061419e565b60405180910390fd5b610c51858585858561226b565b5050505050565b60608151835114610c9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c95906142be565b60405180910390fd5b6000835167ffffffffffffffff811115610cbb57610cba614a01565b5b604051908082528060200260200182016040528015610ce95781602001602082028036833780820191505090505b50905060005b8451811015610d6657610d36858281518110610d0e57610d0d6149d2565b5b6020026020010151858381518110610d2957610d286149d2565b5b60200260200101516105fb565b828281518110610d4957610d486149d2565b5b60200260200101818152505080610d5f90614855565b9050610cef565b508091505092915050565b610d79612610565b73ffffffffffffffffffffffffffffffffffffffff16610d9761165f565b73ffffffffffffffffffffffffffffffffffffffff1614610ded576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de49061421e565b60405180910390fd5b8060000151816020015110610e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2e9061425e565b60405180910390fd5b620f4240816060015110610e80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e779061415e565b60405180910390fd5b6040518060800160405280633b9aca008360000151610e9f9190614603565b8152602001633b9aca008360200151610eb89190614603565b8152602001633b9aca008360400151610ed19190614603565b8152602001633b9aca008360600151610eea9190614603565b81525060096000820151816000015560208201518160010155604082015181600201556060820151816003015590505050565b610f25612610565b73ffffffffffffffffffffffffffffffffffffffff16610f4361165f565b73ffffffffffffffffffffffffffffffffffffffff1614610f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f909061421e565b60405180910390fd5b610fa36000612618565b565b60025481565b3373ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461103b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611032906141fe565b60405180910390fd5b6000815167ffffffffffffffff81111561105857611057614a01565b5b6040519080825280602002602001820160405280156110865781602001602082028036833780820191505090505b50905060005b82518110156111f15760008382815181106110aa576110a96149d2565b5b602002602001015190508473ffffffffffffffffffffffffffffffffffffffff16600482815481106110df576110de6149d2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611160576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611157906141be565b60405180910390fd5b600060048281548110611176576111756149d2565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018383815181106111d3576111d26149d2565b5b60200260200101818152505050806111ea90614855565b905061108c565b50600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8585604051611269929190613f8a565b60405180910390a4505050565b61127e612610565b73ffffffffffffffffffffffffffffffffffffffff1661129c61165f565b73ffffffffffffffffffffffffffffffffffffffff16146112f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e99061421e565b60405180910390fd5b600060028261130191906148b2565b6fffffffffffffffffffffffffffffffff1614611353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134a9061411e565b60405180910390fd5b6000818261136191906145b9565b6fffffffffffffffffffffffffffffffff1690506001548110156113ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b1906141de565b60405180910390fd5b806001819055505050565b60606000600383815481106113dd576113dc6149d2565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000600967ffffffffffffffff81111561145c5761145b614a01565b5b6040519080825280601f01601f19166020018201604052801561148e5781602001600182028036833780820191505090505b5090507f2300000000000000000000000000000000000000000000000000000000000000816000815181106114c6576114c56149d2565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600890505b6001811061159657826010856115129190614914565b63ffffffff1681518110611529576115286149d2565b5b602001015160f81c60f81b828281518110611547576115466149d2565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060048463ffffffff16901c9350808061158e9061479d565b9150506114fc565b50809350505050919050565b60606000825167ffffffffffffffff8111156115c1576115c0614a01565b5b6040519080825280602002602001820160405280156115f457816020015b60608152602001906001900390816115df5790505b50905060005b835181101561165557611626848281518110611619576116186149d2565b5b60200260200101516113c5565b828281518110611639576116386149d2565b5b60200260200101819052508061164e90614855565b90506115fa565b5080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611690612610565b73ffffffffffffffffffffffffffffffffffffffff166116ae61165f565b73ffffffffffffffffffffffffffffffffffffffff1614611704576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fb9061421e565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6003818154811061175857600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b6001548261ffff166002546117979190614532565b106117d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ce9061423e565b60405180910390fd5b60006117e283610ac1565b905080341015611827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181e906140de565b60405180910390fd5b60008361ffff1667ffffffffffffffff81111561184757611846614a01565b5b6040519080825280602002602001820160405280156118755781602001602082028036833780820191505090505b50905060008461ffff1667ffffffffffffffff81111561189857611897614a01565b5b6040519080825280602002602001820160405280156118c65781602001602082028036833780820191505090505b50905060006118d36126dc565b905060005b8661ffff168161ffff161015611a1d578061ffff166002546118fa9190614532565b848261ffff1681518110611911576119106149d2565b5b6020026020010181815250506001838261ffff1681518110611936576119356149d2565b5b6020026020010181815250506004869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003640100000000836119b891906148e3565b90806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff160217905550600182901c91508080611a159061482a565b9150506118d8565b508561ffff1660026000828254611a349190614532565b92505081905550611a593360008786866040518060200160405280600081525061271c565b8473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611ad0929190613f8a565b60405180910390a47f4faa2dc9d79e1c178235a44d8b172a770079e8fc7ca71e95b85398c2f3c50ad783604051611b079190613f68565b60405180910390a1505050505050565b611b22338383612903565b5050565b3373ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611bb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bad906141fe565b60405180910390fd5b6000815167ffffffffffffffff811115611bd357611bd2614a01565b5b604051908082528060200260200182016040528015611c015781602001602082028036833780820191505090505b50905060005b8251811015611ca257600254838281518110611c2657611c256149d2565b5b602002602001015110611c6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c65906140fe565b60405180910390fd5b6001828281518110611c8357611c826149d2565b5b6020026020010181815250508080611c9a90614855565b915050611c07565b50611cc060008484846040518060200160405280600081525061226b565b505050565b60606007604051602001611cd99190613e47565b604051602081830303815290604052905090565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663c4552791866040518263ffffffff1660e01b8152600401611d659190613e69565b60206040518083038186803b158015611d7d57600080fd5b505afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db59190613647565b73ffffffffffffffffffffffffffffffffffffffff161415611ddb576001915050611e69565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169150505b92915050565b6002548310611eb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eaa906140be565b60405180910390fd5b60018214611ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eed906142fe565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611f365750611f358533611ced565b5b611f75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6c9061409e565b60405180910390fd5b611f828585858585612a70565b5050505050565b611f91612610565b73ffffffffffffffffffffffffffffffffffffffff16611faf61165f565b73ffffffffffffffffffffffffffffffffffffffff1614612005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffc9061421e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206c9061407e565b60405180910390fd5b61207e81612618565b50565b60015481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606000821415612139576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061224d565b600082905060005b6000821461216b57808061215490614855565b915050600a826121649190614588565b9150612141565b60008167ffffffffffffffff81111561218757612186614a01565b5b6040519080825280601f01601f1916602001820160405280156121b95781602001600182028036833780820191505090505b5090505b60008514612246576001826121d2919061465d565b9150600a856121e191906148e3565b60306121ed9190614532565b60f81b818381518110612203576122026149d2565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561223f9190614588565b94506121bd565b8093505050505b919050565b60008183106122615781612263565b825b905092915050565b81518351146122af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a6906142de565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561231f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123169061417e565b60405180910390fd5b6000835167ffffffffffffffff81111561233c5761233b614a01565b5b60405190808252806020026020018201604052801561236a5781602001602082028036833780820191505090505b50905060005b845181101561257b57600085828151811061238e5761238d6149d2565b5b6020026020010151905060008583815181106123ad576123ac6149d2565b5b6020026020010151905060025482106123fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f2906140be565b60405180910390fd5b6001811461243e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612435906142fe565b60405180910390fd5b8873ffffffffffffffffffffffffffffffffffffffff1660048381548110612469576124686149d2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e1906141be565b60405180910390fd5b87600483815481106124ff576124fe6149d2565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600084848151811061255c5761255b6149d2565b5b60200260200101818152505050508061257490614855565b9050612370565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87856040516125f2929190613f8a565b60405180910390a461260833878787878761271c565b505050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006001436126eb919061465d565b40426040516020016126fe929190613dec565b6040516020818303038152906040528051906020012060001c905090565b61273b8473ffffffffffffffffffffffffffffffffffffffff16612c7c565b156128fb578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612781959493929190613e84565b602060405180830381600087803b15801561279b57600080fd5b505af19250505080156127cc57506040513d601f19601f820116820180604052508101906127c9919061361a565b60015b612872576127d8614a30565b806308c379a0141561283557506127ed6151b3565b806127f85750612837565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282c9190613fdc565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286990613ffe565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146128f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128f09061401e565b60405180910390fd5b505b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612972576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129699061429e565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612a639190613fc1565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad79061417e565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1660048481548110612b0b57612b0a6149d2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b83906141be565b60405180910390fd5b8360048481548110612ba157612ba06149d2565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628686604051612c5f929190614339565b60405180910390a4612c75338686868686612c9f565b5050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b612cbe8473ffffffffffffffffffffffffffffffffffffffff16612c7c565b15612e7e578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612d04959493929190613eec565b602060405180830381600087803b158015612d1e57600080fd5b505af1925050508015612d4f57506040513d601f19601f82011682018060405250810190612d4c919061361a565b60015b612df557612d5b614a30565b806308c379a01415612db85750612d706151b3565b80612d7b5750612dba565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612daf9190613fdc565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dec90613ffe565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e739061401e565b60405180910390fd5b505b505050505050565b6000612e99612e94846143a2565b61437d565b90508083825260208201905082856020860282011115612ebc57612ebb614a5c565b5b60005b85811015612eec5781612ed28882613018565b845260208401935060208301925050600181019050612ebf565b5050509392505050565b6000612f09612f04846143ce565b61437d565b90508083825260208201905082856020860282011115612f2c57612f2b614a5c565b5b60005b85811015612f5c5781612f4288826131db565b845260208401935060208301925050600181019050612f2f565b5050509392505050565b6000612f79612f74846143fa565b61437d565b90508083825260208201905082856020860282011115612f9c57612f9b614a5c565b5b60005b85811015612fcc5781612fb288826131f0565b845260208401935060208301925050600181019050612f9f565b5050509392505050565b6000612fe9612fe484614426565b61437d565b90508281526020810184848401111561300557613004614a61565b5b61301084828561475b565b509392505050565b60008135905061302781615249565b92915050565b600082601f83011261304257613041614a52565b5b8135613052848260208601612e86565b91505092915050565b600082601f8301126130705761306f614a52565b5b8135613080848260208601612ef6565b91505092915050565b600082601f83011261309e5761309d614a52565b5b81356130ae848260208601612f66565b91505092915050565b6000813590506130c681615260565b92915050565b6000813590506130db81615277565b92915050565b6000815190506130f081615277565b92915050565b600082601f83011261310b5761310a614a52565b5b813561311b848260208601612fd6565b91505092915050565b6000815190506131338161528e565b92915050565b60006080828403121561314f5761314e614a57565b5b613159608061437d565b90506000613169848285016131db565b600083015250602061317d848285016131db565b6020830152506040613191848285016131db565b60408301525060606131a5848285016131db565b60608301525092915050565b6000813590506131c0816152a5565b92915050565b6000813590506131d5816152bc565b92915050565b6000813590506131ea816152d3565b92915050565b6000813590506131ff816152ea565b92915050565b60006020828403121561321b5761321a614a6b565b5b600061322984828501613018565b91505092915050565b6000806040838503121561324957613248614a6b565b5b600061325785828601613018565b925050602061326885828601613018565b9150509250929050565b600080600080600060a0868803121561328e5761328d614a6b565b5b600061329c88828901613018565b95505060206132ad88828901613018565b945050604086013567ffffffffffffffff8111156132ce576132cd614a66565b5b6132da8882890161305b565b935050606086013567ffffffffffffffff8111156132fb576132fa614a66565b5b6133078882890161305b565b925050608086013567ffffffffffffffff81111561332857613327614a66565b5b613334888289016130f6565b9150509295509295909350565b600080600080600060a0868803121561335d5761335c614a6b565b5b600061336b88828901613018565b955050602061337c88828901613018565b945050604061338d888289016131db565b935050606061339e888289016131db565b925050608086013567ffffffffffffffff8111156133bf576133be614a66565b5b6133cb888289016130f6565b9150509295509295909350565b600080604083850312156133ef576133ee614a6b565b5b60006133fd85828601613018565b925050602083013567ffffffffffffffff81111561341e5761341d614a66565b5b61342a8582860161305b565b9150509250929050565b6000806040838503121561344b5761344a614a6b565b5b600061345985828601613018565b925050602061346a858286016130b7565b9150509250929050565b6000806040838503121561348b5761348a614a6b565b5b600061349985828601613018565b92505060206134aa858286016131db565b9150509250929050565b600080604083850312156134cb576134ca614a6b565b5b600083013567ffffffffffffffff8111156134e9576134e8614a66565b5b6134f58582860161302d565b925050602083013567ffffffffffffffff81111561351657613515614a66565b5b6135228582860161305b565b9150509250929050565b60006020828403121561354257613541614a6b565b5b600082013567ffffffffffffffff8111156135605761355f614a66565b5b61356c8482850161305b565b91505092915050565b6000806040838503121561358c5761358b614a6b565b5b600083013567ffffffffffffffff8111156135aa576135a9614a66565b5b6135b68582860161305b565b925050602083013567ffffffffffffffff8111156135d7576135d6614a66565b5b6135e385828601613089565b9150509250929050565b60006020828403121561360357613602614a6b565b5b6000613611848285016130cc565b91505092915050565b6000602082840312156136305761362f614a6b565b5b600061363e848285016130e1565b91505092915050565b60006020828403121561365d5761365c614a6b565b5b600061366b84828501613124565b91505092915050565b60006080828403121561368a57613689614a6b565b5b600061369884828501613139565b91505092915050565b6000602082840312156136b7576136b6614a6b565b5b60006136c5848285016131b1565b91505092915050565b6000602082840312156136e4576136e3614a6b565b5b60006136f2848285016131c6565b91505092915050565b6000806040838503121561371257613711614a6b565b5b6000613720858286016131c6565b925050602061373185828601613018565b9150509250929050565b60006020828403121561375157613750614a6b565b5b600061375f848285016131db565b91505092915050565b600061377483836138d5565b905092915050565b60006137888383613da8565b60208301905092915050565b61379d81614691565b82525050565b60006137ae8261448c565b6137b881856144d2565b9350836020820285016137ca85614457565b8060005b8581101561380657848403895281516137e78582613768565b94506137f2836144b8565b925060208a019950506001810190506137ce565b50829750879550505050505092915050565b600061382382614497565b61382d81856144e3565b935061383883614467565b8060005b83811015613869578151613850888261377c565b975061385b836144c5565b92505060018101905061383c565b5085935050505092915050565b61387f816146a3565b82525050565b613896613891826146af565b61489e565b82525050565b60006138a7826144a2565b6138b181856144f4565b93506138c181856020860161476a565b6138ca81614a70565b840191505092915050565b60006138e0826144ad565b6138ea8185614505565b93506138fa81856020860161476a565b61390381614a70565b840191505092915050565b6000613919826144ad565b6139238185614516565b935061393381856020860161476a565b61393c81614a70565b840191505092915050565b6000613952826144ad565b61395c8185614527565b935061396c81856020860161476a565b80840191505092915050565b60008154613985816147c7565b61398f8186614527565b945060018216600081146139aa57600181146139bb576139ee565b60ff198316865281860193506139ee565b6139c485614477565b60005b838110156139e6578154818901526001820191506020810190506139c7565b838801955050505b50505092915050565b6000613a04603483614516565b9150613a0f82614a8e565b604082019050919050565b6000613a27602883614516565b9150613a3282614add565b604082019050919050565b6000613a4a601e83614516565b9150613a5582614b2c565b602082019050919050565b6000613a6d602b83614516565b9150613a7882614b55565b604082019050919050565b6000613a90602683614516565b9150613a9b82614ba4565b604082019050919050565b6000613ab3600683614527565b9150613abe82614bf3565b600682019050919050565b6000613ad6602983614516565b9150613ae182614c1c565b604082019050919050565b6000613af9601483614516565b9150613b0482614c6b565b602082019050919050565b6000613b1c602f83614516565b9150613b2782614c94565b604082019050919050565b6000613b3f601483614516565b9150613b4a82614ce3565b602082019050919050565b6000613b62602183614516565b9150613b6d82614d0c565b604082019050919050565b6000613b85602e83614516565b9150613b9082614d5b565b604082019050919050565b6000613ba8602683614516565b9150613bb382614daa565b604082019050919050565b6000613bcb602583614516565b9150613bd682614df9565b604082019050919050565b6000613bee603283614516565b9150613bf982614e48565b604082019050919050565b6000613c11600883614527565b9150613c1c82614e97565b600882019050919050565b6000613c34602a83614516565b9150613c3f82614ec0565b604082019050919050565b6000613c57601e83614516565b9150613c6282614f0f565b602082019050919050565b6000613c7a601983614516565b9150613c8582614f38565b602082019050919050565b6000613c9d602083614516565b9150613ca882614f61565b602082019050919050565b6000613cc0602683614516565b9150613ccb82614f8a565b604082019050919050565b6000613ce3602f83614516565b9150613cee82614fd9565b604082019050919050565b6000613d06602e83614516565b9150613d1182615028565b604082019050919050565b6000613d29602983614516565b9150613d3482615077565b604082019050919050565b6000613d4c602983614516565b9150613d57826150c6565b604082019050919050565b6000613d6f602883614516565b9150613d7a82615115565b604082019050919050565b6000613d92603383614516565b9150613d9d82615164565b604082019050919050565b613db181614741565b82525050565b613dc081614741565b82525050565b613dd7613dd282614741565b6148a8565b82525050565b613de68161474b565b82525050565b6000613df88285613885565b602082019150613e088284613dc6565b6020820191508190509392505050565b6000613e248285613978565b9150613e2f82613aa6565b9150613e3b8284613947565b91508190509392505050565b6000613e538284613978565b9150613e5e82613c04565b915081905092915050565b6000602082019050613e7e6000830184613794565b92915050565b600060a082019050613e996000830188613794565b613ea66020830187613794565b8181036040830152613eb88186613818565b90508181036060830152613ecc8185613818565b90508181036080830152613ee0818461389c565b90509695505050505050565b600060a082019050613f016000830188613794565b613f0e6020830187613794565b613f1b6040830186613db7565b613f286060830185613db7565b8181036080830152613f3a818461389c565b90509695505050505050565b60006020820190508181036000830152613f6081846137a3565b905092915050565b60006020820190508181036000830152613f828184613818565b905092915050565b60006040820190508181036000830152613fa48185613818565b90508181036020830152613fb88184613818565b90509392505050565b6000602082019050613fd66000830184613876565b92915050565b60006020820190508181036000830152613ff6818461390e565b905092915050565b60006020820190508181036000830152614017816139f7565b9050919050565b6000602082019050818103600083015261403781613a1a565b9050919050565b6000602082019050818103600083015261405781613a3d565b9050919050565b6000602082019050818103600083015261407781613a60565b9050919050565b6000602082019050818103600083015261409781613a83565b9050919050565b600060208201905081810360008301526140b781613ac9565b9050919050565b600060208201905081810360008301526140d781613aec565b9050919050565b600060208201905081810360008301526140f781613b0f565b9050919050565b6000602082019050818103600083015261411781613b32565b9050919050565b6000602082019050818103600083015261413781613b55565b9050919050565b6000602082019050818103600083015261415781613b78565b9050919050565b6000602082019050818103600083015261417781613b9b565b9050919050565b6000602082019050818103600083015261419781613bbe565b9050919050565b600060208201905081810360008301526141b781613be1565b9050919050565b600060208201905081810360008301526141d781613c27565b9050919050565b600060208201905081810360008301526141f781613c4a565b9050919050565b6000602082019050818103600083015261421781613c6d565b9050919050565b6000602082019050818103600083015261423781613c90565b9050919050565b6000602082019050818103600083015261425781613cb3565b9050919050565b6000602082019050818103600083015261427781613cd6565b9050919050565b6000602082019050818103600083015261429781613cf9565b9050919050565b600060208201905081810360008301526142b781613d1c565b9050919050565b600060208201905081810360008301526142d781613d3f565b9050919050565b600060208201905081810360008301526142f781613d62565b9050919050565b6000602082019050818103600083015261431781613d85565b9050919050565b60006020820190506143336000830184613db7565b92915050565b600060408201905061434e6000830185613db7565b61435b6020830184613db7565b9392505050565b60006020820190506143776000830184613ddd565b92915050565b6000614387614398565b905061439382826147f9565b919050565b6000604051905090565b600067ffffffffffffffff8211156143bd576143bc614a01565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156143e9576143e8614a01565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561441557614414614a01565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561444157614440614a01565b5b61444a82614a70565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061453d82614741565b915061454883614741565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561457d5761457c614945565b5b828201905092915050565b600061459382614741565b915061459e83614741565b9250826145ae576145ad614974565b5b828204905092915050565b60006145c4826146f7565b91506145cf836146f7565b9250816fffffffffffffffffffffffffffffffff04831182151516156145f8576145f7614945565b5b828202905092915050565b600061460e82614741565b915061461983614741565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561465257614651614945565b5b828202905092915050565b600061466882614741565b915061467383614741565b92508282101561468657614685614945565b5b828203905092915050565b600061469c82614721565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006146f082614691565b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b82818337600083830152505050565b60005b8381101561478857808201518184015260208101905061476d565b83811115614797576000848401525b50505050565b60006147a882614741565b915060008214156147bc576147bb614945565b5b600182039050919050565b600060028204905060018216806147df57607f821691505b602082108114156147f3576147f26149a3565b5b50919050565b61480282614a70565b810181811067ffffffffffffffff8211171561482157614820614a01565b5b80604052505050565b600061483582614713565b915061ffff82141561484a57614849614945565b5b600182019050919050565b600061486082614741565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561489357614892614945565b5b600182019050919050565b6000819050919050565b6000819050919050565b60006148bd826146f7565b91506148c8836146f7565b9250826148d8576148d7614974565b5b828206905092915050565b60006148ee82614741565b91506148f983614741565b92508261490957614908614974565b5b828206905092915050565b600061491f8261474b565b915061492a8361474b565b92508261493a57614939614974565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d1115614a4f5760046000803e614a4c600051614a81565b90505b90565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f69647320616e6420636f6c6f7273206c656e677468206d69736d617463680000600082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f706978656c2f0000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f506978656c20646f6573206e6f74206578697374000000000000000000000000600082015250565b7f496e73756666696369656e742076616c756520617474616368656420666f722060008201527f6d696e74696e6720726571756573740000000000000000000000000000000000602082015250565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b7f43616e206f6e6c79207365742073697a6520746f206576656e206e756d62657260008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e742076616c756520617474616368656420666f722060008201527f636f6c6f7220726571756573742e000000000000000000000000000000000000602082015250565b7f436f6c6f72206665652063616e6e6f742065786365656420312c3030302c303060008201527f3020677765690000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f636f6e7472616374000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f43616e6e6f7420726564756365206c696d6974206f6620706978656c732e0000600082015250565b7f4e6f7420612064657369676e6174656420737461736865722e00000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f74206d696e74206d6f726520706978656c73207468616e2061766160008201527f696c61626c650000000000000000000000000000000000000000000000000000602082015250565b7f4d696e696d756d206665652063616e6e6f74206265206772656174657220746860008201527f616e207374617274696e67206665650000000000000000000000000000000000602082015250565b7f507572636861736520776f756c64206d696e74206d6f726520706978656c732060008201527f7468616e20617661696c61626c65000000000000000000000000000000000000602082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f4561636820706978656c20697320756e69717565202d2063616e206f6e6c792060008201527f7472616e736665722031206f6620656163682e00000000000000000000000000602082015250565b600060443d10156151c357615246565b6151cb614398565b60043d036004823e80513d602482011167ffffffffffffffff821117156151f3575050615246565b808201805167ffffffffffffffff8111156152115750505050615246565b80602083010160043d03850181111561522e575050505050615246565b61523d826020018501866147f9565b82955050505050505b90565b61525281614691565b811461525d57600080fd5b50565b615269816146a3565b811461527457600080fd5b50565b615280816146b9565b811461528b57600080fd5b50565b615297816146e5565b81146152a257600080fd5b50565b6152ae816146f7565b81146152b957600080fd5b50565b6152c581614713565b81146152d057600080fd5b50565b6152dc81614741565b81146152e757600080fd5b50565b6152f38161474b565b81146152fe57600080fd5b5056fea26469706673582212205de77944ff52e783057b0f0103a3c12ee6779d57c7a0c98c303081ddd95e886464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Pixel.sol:Pixel",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 959,
        "contract": "contracts/Pixel.sol:Pixel",
        "label": "maxPixels",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 962,
        "contract": "contracts/Pixel.sol:Pixel",
        "label": "pixelsMinted",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 965,
        "contract": "contracts/Pixel.sol:Pixel",
        "label": "pixelColors",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 968,
        "contract": "contracts/Pixel.sol:Pixel",
        "label": "_pixelOwners",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 970,
        "contract": "contracts/Pixel.sol:Pixel",
        "label": "_proxyRegistryAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 976,
        "contract": "contracts/Pixel.sol:Pixel",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 978,
        "contract": "contracts/Pixel.sol:Pixel",
        "label": "_baseUrl",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 984,
        "contract": "contracts/Pixel.sol:Pixel",
        "label": "_stasher",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 987,
        "contract": "contracts/Pixel.sol:Pixel",
        "label": "_fees",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Fees)957_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Fees)957_storage": {
        "encoding": "inplace",
        "label": "struct Pixel.Fees",
        "members": [
          {
            "astId": 950,
            "contract": "contracts/Pixel.sol:Pixel",
            "label": "mintFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 952,
            "contract": "contracts/Pixel.sol:Pixel",
            "label": "mintFeeMin",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 954,
            "contract": "contracts/Pixel.sol:Pixel",
            "label": "bulkDiscount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 956,
            "contract": "contracts/Pixel.sol:Pixel",
            "label": "colorFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}